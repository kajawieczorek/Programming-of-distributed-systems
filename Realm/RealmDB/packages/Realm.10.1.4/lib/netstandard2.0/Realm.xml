<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Realm</name>
    </assembly>
    <members>
        <member name="T:Realms.BacklinkAttribute">
             <summary>
             An attribute that indicates that the property it decorates is the inverse end of a relationship.
             </summary>
             <example>
             <code>
             class Dog : RealmObject
             {
                 // One to many relationship with Person.Dogs
                 public Person Owner { get; set; }
             }
            
             class Person : RealmObject
             {
                 [Backlink(nameof(Dog.Owner))]
                 public IQueryable&lt;Dog&gt; Dogs { get; }
            
                 // Many to many relationship with Hobby.PeopleWithThatHobby
                 public IList&lt;Hobby&gt; Hobbies { get; }
             }
            
             class Hobby : RealmObject
             {
                 [Backlink(nameof(Person.Hobbies))]
                 public IQueryable&lt;Person&gt; PeopleWithThatHobby { get; }
             }
             </code>
             </example>
        </member>
        <member name="M:Realms.BacklinkAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.BacklinkAttribute"/> class.
            </summary>
            <param name="property">The property that is on the other end of the relationship.</param>
        </member>
        <member name="T:Realms.ExplicitAttribute">
             <summary>
             An attribute that prevents the decorated class from being included in Realm's default schema.
             </summary>
             <remarks>
             If applied at the assembly level, then all classes in that assembly will be considered explicit and will not be added to
             the default schema. To include explicit classes in a Realm's schema, you should include them in the
             <see cref="P:Realms.RealmConfigurationBase.ObjectClasses"/> array:
             <code>
             var config = new RealmConfiguration
             {
                 ObjectClasses = new[] { typeof(MyExplicitClass) }
             };
            
             var realm = Realm.GetInstance(config);
             </code>
             </remarks>
        </member>
        <member name="T:Realms.IgnoredAttribute">
            <summary>
            An attribute that indicates an ignored property. Ignored properties will not be persisted in the Realm.
            </summary>
        </member>
        <member name="M:Realms.IgnoredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.IgnoredAttribute"/> class.
            </summary>
        </member>
        <member name="T:Realms.IndexedAttribute">
            <summary>
            An attribute that indicates an indexed property. Indexed properties slightly slow down insertions,
            but can greatly speed up queries.
            </summary>
        </member>
        <member name="M:Realms.IndexedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.IndexedAttribute"/> class.
            </summary>
        </member>
        <member name="T:Realms.MapToAttribute">
            <summary>
            An attribute that indicates that a property should be persisted under a different name.
            </summary>
            <remarks>
            This is useful when opening a Realm across different bindings where code style conventions might differ.
            </remarks>
        </member>
        <member name="P:Realms.MapToAttribute.Mapping">
            <summary>
            Gets the name of the property in the database.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="M:Realms.MapToAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.MapToAttribute"/> class.
            </summary>
            <param name="mapping">The name of the property in the database.</param>
        </member>
        <member name="T:Realms.PreserveAttribute">
            <summary>
            Prevents the Xamarin managed linker from removing the target.
            </summary>
        </member>
        <member name="F:Realms.PreserveAttribute.AllMembers">
            <summary>
            When used on a class rather than a property, ensures that all members of this type are preserved.
            </summary>
        </member>
        <member name="F:Realms.PreserveAttribute.Conditional">
            <summary>
            Flags the method as a method to preserve during linking if the container class is pulled in.
            </summary>
        </member>
        <member name="M:Realms.PreserveAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.PreserveAttribute"/> class.
            </summary>
            <param name="allMembers">If set to <c>true</c> all members will be preserved.</param>
            <param name="conditional">If set to <c>true</c>, the method will only be preserved if the container class is preserved.</param>
        </member>
        <member name="M:Realms.PreserveAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.PreserveAttribute"/> class.
            </summary>
        </member>
        <member name="T:Realms.PrimaryKeyAttribute">
            <summary>
            An attribute that indicates the primary key property. It allows quick lookup of objects and enforces uniqueness of the values stored. It may only be applied to a single property in a class.
            </summary>
            <remarks>
            Only char, integral types, and strings can be used as primary keys.
            Once an object with a Primary Key has been added to the Realm, that property may not be changed.
            </remarks>
        </member>
        <member name="M:Realms.PrimaryKeyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.PrimaryKeyAttribute"/> class.
            </summary>
        </member>
        <member name="T:Realms.RequiredAttribute">
            <summary>
            An attribute that indicates a required property. When persisting, the Realm will validate that the value of the property is not null.
            </summary>
        </member>
        <member name="M:Realms.RequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.RequiredAttribute"/> class.
            </summary>
        </member>
        <member name="T:Realms.WovenAssemblyAttribute">
            <summary>
            An attribute that indicates that the assembly has been woven. It is applied automatically by the RealmWeaver and should not be used manually.
            </summary>
        </member>
        <member name="T:Realms.WovenAttribute">
            <summary>
            An attribute that indicates that a class has been woven. It is applied automatically by the RealmWeaver and should not be used manually.
            </summary>
        </member>
        <member name="M:Realms.WovenAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.WovenAttribute"/> class.
            </summary>
            <param name="helperType">The type of the generated RealmObjectHelper for that class.</param>
        </member>
        <member name="T:Realms.WovenPropertyAttribute">
            <summary>
            An attribute that indicates that a property has been woven. It is applied automatically by the RealmWeaver and should not be used manually.
            </summary>
        </member>
        <member name="T:Realms.InMemoryConfiguration">
            <summary>
            A Realm configuration specifying settings for an in-memory Realm. When all in-memory instances with the
            same identifier are disposed or go out of scope, all data in that Realm is deleted.
            </summary>
        </member>
        <member name="P:Realms.InMemoryConfiguration.Identifier">
            <summary>
            Gets a value indicating the identifier of the Realm that will be opened with this <see cref="T:Realms.InMemoryConfiguration"/>.
            </summary>
        </member>
        <member name="M:Realms.InMemoryConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.InMemoryConfiguration"/> class with a specified identifier.
            </summary>
            <param name="identifier">A string that will uniquely identify this in-memory Realm.</param>
            <remarks>
            Different instances with the same identifier will see the same data.
            When all instances with a particular identifier have been removed, the data will be deleted and no longer accessible.
            The identifier must not be the same as the file name of a persisted Realm.
            </remarks>
        </member>
        <member name="T:Realms.RealmConfiguration">
            <summary>
            Realm configuration specifying settings that affect the Realm's behavior.
            </summary>
            <remarks>
            Its main role is generating a canonical path from whatever absolute, relative subdirectory, or just filename the user supplies.
            </remarks>
        </member>
        <member name="T:Realms.RealmConfiguration.MigrationCallbackDelegate">
            <summary>
            In order to handle manual migrations, you need to supply a migration callback to your
            <see cref="T:Realms.RealmConfiguration"/>. It will be called with a <see cref="T:Realms.Migration"/> instance containing
            the pre- and the post-migration <see cref="T:Realms.Realm"/>. You should make sure that the <see cref="P:Realms.Migration.NewRealm"/>
            property on it contains a database that is up to date when returning. The <c>oldSchemaVersion</c>
            parameter will tell you which <see cref="P:Realms.RealmConfigurationBase.SchemaVersion"/> the user is migrating
            <b>from</b>. They should always be migrating to the current <see cref="P:Realms.RealmConfigurationBase.SchemaVersion"/>.
            </summary>
            <param name="migration">
            The <see cref="T:Realms.Migration"/> instance, containing information about the old and the new <see cref="T:Realms.Realm"/>.
            </param>
            <param name="oldSchemaVersion">
            An unsigned long value indicating the <see cref="P:Realms.RealmConfigurationBase.SchemaVersion"/> of the old
            <see cref="T:Realms.Realm"/>.
            </param>
        </member>
        <member name="T:Realms.RealmConfiguration.ShouldCompactDelegate">
            <summary>
            A callback, invoked when opening a Realm for the first time during the life
            of a process to determine if it should be compacted before being returned
            to the user.
            </summary>
            <param name="totalBytes">Total file size (data + free space).</param>
            <param name="bytesUsed">Total data size.</param>
            <returns><c>true</c> to indicate that an attempt to compact the file should be made.</returns>
            <remarks>The compaction will be skipped if another process is accessing it.</remarks>
        </member>
        <member name="P:Realms.RealmConfiguration.ShouldDeleteIfMigrationNeeded">
            <summary>
            Gets or sets a value indicating whether the database will be deleted if the <see cref="T:Realms.Schema.RealmSchema"/>
            mismatches the one in the code. Use this when debugging and developing your app but never release it with
            this flag set to <c>true</c>.
            </summary>
            <value><c>true</c> to delete the database on schema mismatch; <c>false</c> otherwise.</value>
        </member>
        <member name="P:Realms.RealmConfiguration.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:Realms.Realm"/> is opened as readonly. This allows opening it
            from locked locations such as resources, bundled with an application.
            </summary>
            <value><c>true</c> if the <see cref="T:Realms.Realm"/> will be opened as readonly; <c>false</c> otherwise.</value>
        </member>
        <member name="P:Realms.RealmConfiguration.MigrationCallback">
            <summary>
            Gets or sets the migration callback.
            </summary>
            <value>
            The <see cref="T:Realms.RealmConfiguration.MigrationCallbackDelegate"/> that will be invoked if the <see cref="T:Realms.Realm"/> needs
            to be migrated.
            </value>
        </member>
        <member name="P:Realms.RealmConfiguration.ShouldCompactOnLaunch">
            <summary>
            Gets or sets the compact on launch callback.
            </summary>
            <value>
            The <see cref="T:Realms.RealmConfiguration.ShouldCompactDelegate"/> that will be invoked when opening a Realm for the first time
            to determine if it should be compacted before being returned to the user.
            </value>
        </member>
        <member name="P:Realms.RealmConfiguration.DefaultConfiguration">
            <summary>
            Gets or sets the <see cref="T:Realms.RealmConfigurationBase"/> that is used when creating a new <see cref="T:Realms.Realm"/> without specifying a configuration.
            </summary>
            <value>The default configuration.</value>
        </member>
        <member name="M:Realms.RealmConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.RealmConfiguration"/> class.
            </summary>
            <param name="optionalPath">Path to the realm, must be a valid full path for the current platform, relative subdirectory, or just filename.</param>
        </member>
        <member name="M:Realms.RealmConfiguration.ConfigWithPath(System.String)">
            <summary>
            Clone method allowing you to override or customize the current path.
            </summary>
            <returns>An object with a fully-specified, canonical path.</returns>
            <param name="newConfigPath">Path to the realm, must be a valid full path for the current platform, relative subdirectory, or just filename.</param>
        </member>
        <member name="T:Realms.RealmConfigurationBase">
            <summary>
            Base class for specifying configuration settings that affect the Realm's behavior.
            </summary>
            <remarks>
            Its main role is generating a canonical path from whatever absolute, relative subdirectory, or just filename the user supplies.
            </remarks>
        </member>
        <member name="P:Realms.RealmConfigurationBase.DefaultRealmName">
            <summary>
            Gets the filename to be combined with the platform-specific document directory.
            </summary>
            <value>A string representing a filename only, no path.</value>
        </member>
        <member name="P:Realms.RealmConfigurationBase.DatabasePath">
            <summary>
            Gets or sets the full path of the Realms opened with this Configuration. May be overridden by passing in a separate name.
            </summary>
            <value>The absolute path to the Realm.</value>
        </member>
        <member name="P:Realms.RealmConfigurationBase.IsDynamic">
            <summary>
            Gets or sets a value indicating whether the Realm will be open in dynamic mode. If opened in dynamic mode,
            the schema will be read from the file on disk.
            </summary>
            <value><c>true</c> if the Realm will be opened in dynamic mode; <c>false</c> otherwise.</value>
        </member>
        <member name="P:Realms.RealmConfigurationBase.ObjectClasses">
            <summary>
            Gets or sets the list of classes persisted in a Realm opened with this configuration.
            </summary>
            <remarks>
            Typically left null so by default all <see cref="T:Realms.RealmObject"/>s and <see cref="T:Realms.EmbeddedObject"/>s will be able to be stored in all Realms.
            </remarks>
            <example>
            <code>
            config.ObjectClasses = new Type[]
            {
                typeof(CommonClass),
                typeof(RareClass)
            };
            </code>
            </example>
            <value>The classes that can be persisted in the Realm.</value>
        </member>
        <member name="M:Realms.RealmConfigurationBase.GetPathToRealm(System.String)">
            <summary>
            Utility to build a path in which a Realm will be created so can consistently use filenames and relative paths.
            </summary>
            <param name="optionalPath">Path to the Realm, must be a valid full path for the current platform, relative subdirectory, or just filename.</param>
            <returns>A full path including name of Realm file.</returns>
        </member>
        <member name="P:Realms.RealmConfigurationBase.SchemaVersion">
            <summary>
            Gets or sets a number, indicating the version of the schema. Can be used to arbitrarily distinguish between schemas even if they have the same objects and properties.
            </summary>
            <value>0-based value initially set to zero so all user-set values will be greater.</value>
        </member>
        <member name="P:Realms.RealmConfigurationBase.EncryptionKey">
            <summary>
            Gets or sets the key, used to encrypt the entire Realm. Once set, must be specified each time the file is used.
            </summary>
            <value>Full 64byte (512bit) key for AES-256 encryption.</value>
        </member>
        <member name="P:Realms.RealmConfigurationBase.MaxNumberOfActiveVersions">
            <summary>
            Gets or sets the maximum number of active versions allowed before an exception is thrown.
            </summary>
            <seealso cref="M:Realms.Realm.Freeze"/>
        </member>
        <member name="T:Realms.Sync.SyncConfiguration">
            <summary>
            A <see cref="T:Realms.Sync.SyncConfiguration"/> is used to setup a <see cref="T:Realms.Realm"/> that can be synchronized between devices using MongoDB Realm.
            </summary>
            <seealso href="https://docs.mongodb.com/realm/sync/overview/">Sync Overview Docs</seealso>
        </member>
        <member name="P:Realms.Sync.SyncConfiguration.User">
            <summary>
            Gets the <see cref="P:Realms.Sync.SyncConfiguration.User"/> used to create this <see cref="T:Realms.Sync.SyncConfiguration"/>.
            </summary>
            <value>The <see cref="P:Realms.Sync.SyncConfiguration.User"/> whose <see cref="T:Realms.Realm"/>s will be synced.</value>
        </member>
        <member name="P:Realms.Sync.SyncConfiguration.OnProgress">
            <summary>
            Gets or sets a callback that is invoked when download progress is made when using <see cref="M:Realms.Realm.GetInstanceAsync(Realms.RealmConfigurationBase,System.Threading.CancellationToken)"/>.
            This will only be invoked for the initial download of the Realm and will not be invoked as futher download
            progress is made during the lifetime of the Realm. It is ignored when using
            <see cref="M:Realms.Realm.GetInstance(Realms.RealmConfigurationBase)"/>.
            </summary>
            <value>A callback that will be periodically invoked as the Realm is downloaded.</value>
        </member>
        <member name="P:Realms.Sync.SyncConfiguration.Partition">
            <summary>
            Gets the partition identifying the Realm this configuration is describing.
            </summary>
            <value>The partition value for the Realm.</value>
        </member>
        <member name="M:Realms.Sync.SyncConfiguration.#ctor(System.String,Realms.Sync.User,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.Sync.SyncConfiguration"/> class.
            </summary>
            <param name="partition">
            The partition identifying the remote Realm that will be synchronized.
            </param>
            <param name="user">
            A valid <see cref="P:Realms.Sync.SyncConfiguration.User"/>.
            </param>
            <param name="optionalPath">
            Path to the realm, must be a valid full path for the current platform, relative subdirectory, or just filename.
            </param>
        </member>
        <member name="M:Realms.Sync.SyncConfiguration.#ctor(System.Nullable{System.Int64},Realms.Sync.User,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.Sync.SyncConfiguration"/> class.
            </summary>
            <param name="partition">
            The partition identifying the remote Realm that will be synchronized.
            </param>
            <param name="user">
            A valid <see cref="P:Realms.Sync.SyncConfiguration.User"/>.
            </param>
            <param name="optionalPath">
            Path to the realm, must be a valid full path for the current platform, relative subdirectory, or just filename.
            </param>
        </member>
        <member name="M:Realms.Sync.SyncConfiguration.#ctor(System.Nullable{MongoDB.Bson.ObjectId},Realms.Sync.User,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.Sync.SyncConfiguration"/> class.
            </summary>
            <param name="partition">
            The partition identifying the remote Realm that will be synchronized.
            </param>
            <param name="user">
            A valid <see cref="P:Realms.Sync.SyncConfiguration.User"/>.
            </param>
            <param name="optionalPath">
            Path to the realm, must be a valid full path for the current platform, relative subdirectory, or just filename.
            </param>
        </member>
        <member name="T:Realms.Sync.Exceptions.AppException">
            <summary>
            An exception thrown from operations interacting with a MongoDB Realm app.
            </summary>
        </member>
        <member name="P:Realms.Sync.Exceptions.AppException.StatusCode">
            <summary>
            Gets the HTTP status code returned by the remote operation.
            </summary>
            <value>The HTTP status code of the operation that failed or <c>null</c> if the error was not an http one.</value>
        </member>
        <member name="T:Realms.Sync.Exceptions.ClientResetException">
            <summary>
            An exception describing a condition where a reset of the local Realm is required.
            </summary>
        </member>
        <member name="P:Realms.Sync.Exceptions.ClientResetException.BackupFilePath">
            <summary>
            Gets the path where the backup copy of the realm will be placed once the client reset process is complete.
            </summary>
            <value>The path to the backup realm.</value>
        </member>
        <member name="M:Realms.Sync.Exceptions.ClientResetException.InitiateClientReset">
            <summary>
            Initiates the client reset process.
            </summary>
            <returns><c>true</c> if actions were run successfully, <c>false</c> otherwise.</returns>
            <remarks>
            On Windows, all Realm instances for that path must be disposed before this method is called or an
            Exception will be thrown.
            </remarks>
        </member>
        <member name="T:Realms.Sync.Exceptions.ErrorCode">
            <summary>
            Error code enumeration, indicating the type of the session error.
            </summary>
            <seealso cref="T:Realms.Sync.Exceptions.SessionException"/>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.Unknown">
            <summary>
            Unrecognized error code. It usually indicates incompatibility between the authentication server and client SDK versions.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.SessionClosed">
            <summary>
            Session has been closed (no error).
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.OtherSessionError">
            <summary>
            Other session level error has occurred.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.AccessTokenExpired">
            <summary>
            Access token has already expired.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadUserAuthentication">
            <summary>
            Failed to authenticate user.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.IllegalRealmPath">
            <summary>
            Path to Realm is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.NoSuchRealm">
            <summary>
            Path points to non-existing Realm.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.PermissionDenied">
            <summary>
            Permission to Realm has been denied.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadServerFileIdentifier">
            <summary>
            The server file identifier is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadClientFileIdentifier">
            <summary>
            The client file identifier is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadServerVersion">
            <summary>
            The server version is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadClientVersion">
            <summary>
            The client version is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.DivergingHistories">
            <summary>
            Histories have diverged and cannot be merged.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadChangeset">
            <summary>
            The changeset is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.DisabledSession">
            <summary>
            The session has been disabled.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.BadClientFile">
            <summary>
            The client file is invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.UserMismatch">
            <summary>
            The user for this session doesn't match the user who originally created the file. This can happen
            if you explicitly specify the Realm file path in the configuration and you open the Realm first with
            user A, then with user B without changing the on-disk path.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.TooManySessions">
            <summary>
            The server has received too many sessions from this client. This is typically a transient error
            but can also indicate that the client has too many Realms open at the same time.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.InvalidSchemaChange">
            <summary>
            The client attempted to upload an invalid schema change - either an additive schema change
            when developer mode is <c>off</c> or a destructive schema change.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.InvalidParameters">
            <summary>
            Your request parameters did not validate.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.MissingParameters">
            <summary>
            Your request did not validate because of missing parameters.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.InvalidCredentials">
            <summary>
            The provided credentials are invalid.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.UnknownAccount">
            <summary>
            The account does not exist.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.ExistingAccount">
            <summary>
            The account cannot be registered as it exists already.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.AccessDenied">
            <summary>
            The path is invalid or current user has no access.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.ExpiredRefreshToken">
            <summary>
            The refresh token is expired.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.InvalidHost">
            <summary>
            The server is not authoritative for this URL.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.ExpiredPermissionOffer">
            <summary>
            The permission offer is expired.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.AmbiguousPermissionOfferToken">
            <summary>
            The token used on the permission request does match more than a single permission offer.
            </summary>
        </member>
        <member name="F:Realms.Sync.Exceptions.ErrorCode.FileMayNotBeShared">
            <summary>
            The Realm file at the specified path is not available for shared access.
            </summary>
        </member>
        <member name="T:Realms.Sync.Exceptions.IncompatibleSyncedFileException">
            <summary>
            An exception thrown when attempting to open an incompatible Synchronized Realm file. This usually happens
            when the Realm file was created with an older version of the SDK and automatic migration to the current version
            is not possible. When such an exception occurs, the original file is moved to a backup location and a new file is
            created instead. If you wish to migrate any data from the backup location, you can use <see cref="M:Realms.Sync.Exceptions.IncompatibleSyncedFileException.GetBackupRealmConfig(System.Byte[])"/>
            to obtain a <see cref="T:Realms.RealmConfigurationBase"/> that can then be used to open the backup Realm. After that, retry
            opening the original Realm file (which now should be recreated as an empty file) and copy all data from the backup
            file to the new one.
            </summary>
            <example>
            <code>
            var syncConfig = new SyncConfiguration(user, serverUri);
            try
            {
                var realm = Realm.GetInstance(syncConfig);
                // Do something if call was successful.
            }
            catch (IncompatibleSyncedFileException ex)
            {
                var backupConfig = ex.GetBackupRealmConfig();
                var backupRealm = Realm.GetInstance(backupConfig);
                var realm = Realm.GetInstance(syncConfig);
                realm.Write(() =>
                {
                    foreach (var item in backupRealm.All("MyItem"))
                    {
                        realm.Add(new MyItem
                        {
                            Value = item.Value,
                            ...
                        });
                    }
                });
            }
            </code>
            </example>
        </member>
        <member name="M:Realms.Sync.Exceptions.IncompatibleSyncedFileException.GetBackupRealmConfig(System.Byte[])">
            <summary>
            Gets a <see cref="T:Realms.RealmConfigurationBase"/> instance that can be used to open the backup Realm file.
            </summary>
            <param name="encryptionKey">Optional encryption key that was used to encrypt the original Realm file.</param>
            <returns>A configuration object for the backup Realm.</returns>
        </member>
        <member name="T:Realms.Sync.Exceptions.PermissionDeniedException">
            <summary>
            An error that indicates the user does not have permission to perform an operation
            upon a synced Realm. For example, a user may receive this error if they attempt to
            open a Realm they do not have at least read access to, or write to a Realm they only
            have read access to.
            <para />
            This error may also occur if a user incorrectly opens a Realm they have read-only
            permissions to without using the <see cref="M:Realms.Realm.GetInstanceAsync(Realms.RealmConfigurationBase,System.Threading.CancellationToken)"/> API.
            A Realm that suffers a permission denied error is, by default, flagged so that its
            local copy will be deleted the next time the application starts.
            <para />
            The <see cref="T:Realms.Sync.Exceptions.PermissionDeniedException"/> exposes a method that
            can be called with a single argument: <c>true</c> to immediately delete the Realm file,
            or <c>false</c> to not delete the file at all (either now or upon restart). This method
            should only be called with <c>true</c> if and when your app disposes of every
            instance of the offending Realm on all threads.
            </summary>
        </member>
        <member name="M:Realms.Sync.Exceptions.PermissionDeniedException.DeleteRealmUserInfo">
            <summary>
            A method that can be called to manually initiate or cancel the Realm file deletion process. If the method
            isn't called at all, the Realm file will be deleted the next time your application is launched and the
            sync subsystem is initialized. Can only be called once.
            </summary>
            <returns><c>true</c> if actions were run successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Realms.Sync.Exceptions.SessionException">
            <summary>
            An exception type that describes a session-level error condition.
            </summary>
        </member>
        <member name="P:Realms.Sync.Exceptions.SessionException.ErrorCode">
            <summary>
            Gets the error code that describes the session error this exception represents.
            </summary>
            <value>An enum value, providing more detailed information for the cause of the error.</value>
        </member>
        <member name="T:Realms.Sync.RealmSyncExtensions">
            <summary>
            A set of extension methods that provide Sync-related functionality on top of Realm classes.
            </summary>
        </member>
        <member name="M:Realms.Sync.RealmSyncExtensions.GetSession(Realms.Realm)">
            <summary>
            Gets the <see cref="T:Realms.Sync.Session"/> for the realm file behind this <see cref="T:Realms.Realm"/>.
            </summary>
            <returns>The <see cref="T:Realms.Sync.Session"/> that is responsible for synchronizing with the MongoDB Realm server.</returns>
            <param name="realm">An instance of the <see cref="T:Realms.Realm"/> class created with a <see cref="T:Realms.Sync.SyncConfiguration"/> object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="realm"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="realm"/> was not created with a <see cref="T:Realms.Sync.SyncConfiguration"/> object.</exception>
        </member>
        <member name="T:Realms.Sync.Testing.TestingExtensions">
            <summary>
            A set of extension methods to be used in unit-testing scenarios. Should not be used in production.
            </summary>
        </member>
        <member name="M:Realms.Sync.Testing.TestingExtensions.SimulateError(Realms.Sync.Session,Realms.Sync.Exceptions.ErrorCode,System.String,System.Boolean)">
            <summary>
            Simulates a session error.
            </summary>
            <param name="session">The session where the simulated error will occur.</param>
            <param name="errorCode">Error code.</param>
            <param name="message">Error message.</param>
            <param name="isFatal">If set to <c>true</c> the error will be marked as fatal.</param>
            <remarks>
            Use this method to test your error handling code without connecting to a MongoDB Realm Server.
            Some error codes, such as <see cref="F:Realms.Sync.Exceptions.ErrorCode.OtherSessionError"/> will be ignored and will not be reported
            to <see cref="E:Realms.Sync.Session.Error"/> subscribers.
            </remarks>
        </member>
        <member name="T:Realms.Sync.ApiKey">
            <summary>
            A class representing an API key for a <see cref="T:Realms.Sync.User"/>. It can be used to represent the user when logging in
            instead of their regular credentials. These keys are created or fetched through <see cref="P:Realms.Sync.User.ApiKeys"/>.
            </summary>
            <remarks>
            An API key's <see cref="P:Realms.Sync.ApiKey.Value"/> is only available when the key is created and cannot be obtained after that.
            This means that it's the caller's responsibility to safely store an API key's value upon creation.
            </remarks>
            <seealso href="https://docs.mongodb.com/realm/authentication/api-key/">API Key Authentication Docs</seealso>
        </member>
        <member name="P:Realms.Sync.ApiKey.Id">
            <summary>
            Gets the unique identifier for this key.
            </summary>
            <value>The id uniquely identifying the key.</value>
        </member>
        <member name="P:Realms.Sync.ApiKey.Name">
            <summary>
            Gets the name of the key.
            </summary>
            <value>The friendly name of the key, specified when calling <see cref="M:Realms.Sync.User.ApiKeyClient.CreateAsync(System.String)"/>.</value>
        </member>
        <member name="P:Realms.Sync.ApiKey.Value">
            <summary>
            Gets the value for the key. This is only returned when the key is created. After that, it will always be <c>null</c>.
            </summary>
            <value>The value of the key that needs to be provided when constructing <see cref="M:Realms.Sync.Credentials.ApiKey(System.String)"/>.</value>
        </member>
        <member name="P:Realms.Sync.ApiKey.IsEnabled">
            <summary>
            Gets a value indicating whether or not this key is currently enabled.
            </summary>
            <value><c>true</c> if the key is enabled; <c>false</c> otherwise.</value>
        </member>
        <member name="M:Realms.Sync.ApiKey.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Realms.Sync.ApiKey.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Realms.Sync.ApiKey.ToString">
            <summary>
            Returns a string representation of the value.
            </summary>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="T:Realms.Sync.App">
             <summary>
             An <see cref="T:Realms.Sync.App"/> is the main client-side entry point for interacting with a MongoDB Realm App.
             </summary>
             <remarks>
             The App can be used to:
             <br/>
             <list type="bullet">
             <item><description>
             Register uses and perform various user-related operations through authentication providers (e.g. <see cref="P:Realms.Sync.User.ApiKeys"/>, <see cref="P:Realms.Sync.App.EmailPasswordAuth"/>).
             </description></item>
             <item><description>
             Synchronize data between the local device and a remote Realm App with Synchronized Realms (using <see cref="T:Realms.Sync.SyncConfiguration"/>).
             </description></item>
             <item><description>
             Invoke Realm App functions with Functions (using <see cref="P:Realms.Sync.User.Functions"/>).
             </description></item>
             <item><description>
             Access remote data from MongoDB databases with a <see cref="T:Realms.Sync.MongoClient"/> (using <see cref="M:Realms.Sync.User.GetMongoClient(System.String)"/>).
             </description></item>
             </list>
             <br/>
             To create an app that is linked with a remote Realm App initialize Realm and configure the App as shown below:
             <code>
             var appConfig = new AppConfiguration("my-realm-app-id")
             {
                 LocalAppName = "My amazing iOS app",
                 LocalAppVersion = "1.2.3"
             };
            
             var app = new App(appConfig);
             </code>
             After configuring the App you can start managing users, configure Synchronized Realms, call remote Realm Functions, and access remote data through Mongo Collections.
             <br/>
             To register a new user and/or login with an existing user do as shown below:
             <code>
             await app.EmailPassword.RegisterUserAsync("foo@bar.com", "password");
             // Login with existing user
             var user = app.LoginAsync(Credentials.EmailPassword("foo@bar.com", "password");
             </code>
             With an authorized user you can synchronize data between the local device and the remote Realm App by opening a Realm with a <see cref="T:Realms.Sync.SyncConfiguration"/> as indicated below:
             <code>
             var syncConfig = new SyncConfiguration("some-partition-value", user);
             using var realm = await Realm.GetInstanceAsync(syncConfig);
            
             realm.Write(() =>
             {
                 realm.Add(...);
             });
            
             await realm.GetSession().WaitForUploadAsync();
             </code>
             You can call remote Realm functions as shown below:
             <code>
             var result = await user.Functions.CallAsync&lt;int&gt;("sum", 1, 2, 3, 4, 5);
             </code>
             And access collections from the remote Realm App as shown here:
             <code>
             var client = user.GetMongoClient("atlas-service");
             var db = client.GetDatabase("my-db");
             var collection = db.GetCollection("foos");
             var foosCount = await collection.CountAsync();
             </code>
             </remarks>
             <seealso cref="T:Realms.Sync.AppConfiguration"/>
        </member>
        <member name="P:Realms.Sync.App.Sync">
            <summary>
            Gets a <see cref="T:Realms.Sync.App.SyncClient"/> instance that exposes API for interacting with the synchronization client for this <see cref="T:Realms.Sync.App"/>.
            </summary>
            <value>A <see cref="T:Realms.Sync.App.SyncClient"/> instance scoped to this <see cref="T:Realms.Sync.App"/>.</value>
        </member>
        <member name="P:Realms.Sync.App.EmailPasswordAuth">
            <summary>
            Gets a <see cref="T:Realms.Sync.App.EmailPasswordClient"/> instance that exposes functionality related to users either being created or logged in using
            the <see cref="F:Realms.Sync.Credentials.AuthProvider.EmailPassword"/> provider.
            </summary>
            <value>An <see cref="T:Realms.Sync.App.EmailPasswordClient"/> instance scoped to this <see cref="T:Realms.Sync.App"/>.</value>
        </member>
        <member name="P:Realms.Sync.App.CurrentUser">
            <summary>
            Gets the currently user. If none exists, null is returned.
            </summary>
            <value>Valid user or <c>null</c> to indicate nobody logged in.</value>
        </member>
        <member name="P:Realms.Sync.App.AllUsers">
            <summary>
            Gets all currently logged in users.
            </summary>
            <value>An array of valid logged in users.</value>
        </member>
        <member name="M:Realms.Sync.App.Create(Realms.Sync.AppConfiguration)">
            <summary>
            A factory method for creating an app with a particular <see cref="T:Realms.Sync.AppConfiguration"/>.
            </summary>
            <param name="config">The <see cref="T:Realms.Sync.AppConfiguration"/>, specifying key parameters for the app behavior.</param>
            <returns>An <see cref="T:Realms.Sync.App"/> instance can now be used to login users, call functions, or open synchronized Realms.</returns>
        </member>
        <member name="M:Realms.Sync.App.Create(System.String)">
            <summary>
            A factory method for creating an app with a particular app Id.
            </summary>
            <remarks>
            This is a convenience method that creates an <see cref="T:Realms.Sync.AppConfiguration"/> with the default parameters and the provided <paramref name="appId"/>
            and invokes <see cref="M:Realms.Sync.App.Create(Realms.Sync.AppConfiguration)"/>.
            </remarks>
            <param name="appId">The application id of the MongoDB Realm Application.</param>
            <returns>An <see cref="T:Realms.Sync.App"/> instance can now be used to login users, call functions, or open synchronized Realms.</returns>
        </member>
        <member name="M:Realms.Sync.App.LogInAsync(Realms.Sync.Credentials)">
            <summary>
            Logs in as a user with the given credentials associated with an authentication provider.
            </summary>
            <remarks>
            The last logged in user will be saved as <see cref="P:Realms.Sync.App.CurrentUser"/>. If there was already a current user,
            that user is still logged in and can be found in the list returned by <see cref="P:Realms.Sync.App.AllUsers"/>. It is also
            possible to switch between which user is considered the current user by using <see cref="M:Realms.Sync.App.SwitchUser(Realms.Sync.User)"/>.
            </remarks>
            <param name="credentials">The <see cref="T:Realms.Sync.Credentials"/> representing the type of login.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous LogIn operation.</returns>
        </member>
        <member name="M:Realms.Sync.App.SwitchUser(Realms.Sync.User)">
            <summary>
            Switches the <see cref="P:Realms.Sync.App.CurrentUser"/> to the one specified in <paramref name="user"/>.
            </summary>
            <param name="user">The new current user.</param>
        </member>
        <member name="M:Realms.Sync.App.RemoveUserAsync(Realms.Sync.User)">
            <summary>
            Removes a user and their local data from the device. If the user is logged in, they will be logged out in the process.
            </summary>
            <remarks>
            This is client operation and will not delete any data stored on the server for that user.
            </remarks>
            <param name="user">The user to log out and remove.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous RemoveUser operation. Successful completion indicates that the user has been logged out,
            their local data - removed, and the user's <see cref="P:Realms.Sync.User.RefreshToken"/> - revoked on the server.
            </returns>
        </member>
        <member name="T:Realms.Sync.App.SyncClient">
            <summary>
            A sync manager, handling synchronization of local Realm with remote MongoDB Realm apps. It is always scoped to a
            particular app and can only be accessed via <see cref="P:Realms.Sync.App.Sync"/>.
            </summary>
        </member>
        <member name="M:Realms.Sync.App.SyncClient.Reconnect">
            <summary>
            Attempt to reconnect all <see cref="T:Realms.Sync.Session">Sync sessions</see> for the app.
            </summary>
            <remarks>
            Realm will automatically detect when a device gets connectivity after being offline and resume syncing.
            However, some of these checks are performed using incremental backoff, which means that there are cases
            when automatic reconnection doesn't happen immediately. In those cases, it can be beneficial to call
            this method manually, which will force all sessions to attempt to reconnect and in the process, reset
            any timers, that are used for incremental backoff.
            </remarks>
        </member>
        <member name="T:Realms.Sync.App.EmailPasswordClient">
            <summary>
            A class, encapsulating functionality for users, logged in with the <see cref="F:Realms.Sync.Credentials.AuthProvider.EmailPassword"/> provider.
            It is always scoped to a particular app and can only be accessed via <see cref="P:Realms.Sync.App.EmailPasswordAuth"/>.
            </summary>
        </member>
        <member name="M:Realms.Sync.App.EmailPasswordClient.RegisterUserAsync(System.String,System.String)">
            <summary>
            Registers a new user with the given email and password.
            </summary>
            <param name="email">
            The email to register with. This will be the user's username and, if user confirmation is enabled, this will be the address for
            the confirmation email.
            </param>
            <param name="password">The password to associate with the email. The password must be between 6 and 128 characters long.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous RegisterUser operation. Successful completion indicates that the user has been
            created on the server and can now be logged in calling <see cref="M:Realms.Sync.App.LogInAsync(Realms.Sync.Credentials)"/> with <see cref="M:Realms.Sync.Credentials.EmailPassword(System.String,System.String)"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.App.EmailPasswordClient.ConfirmUserAsync(System.String,System.String)">
            <summary>
            Confirms a user with the given token and token id. These are typically included in the email the user received
            after registering.
            </summary>
            <remarks>
            While confirmation typically happens in a web app, mobile applications that have deep linking enabled can intercept the url
            and complete the user confirmation flow in the app itself.
            </remarks>
            <param name="token">The confirmation token.</param>
            <param name="tokenId">The id of the confirmation token.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous ConfirmUser operation. Successful completion indicates that the user has been
            confirmed on the server.
            </returns>
        </member>
        <member name="M:Realms.Sync.App.EmailPasswordClient.ResendConfirmationEmailAsync(System.String)">
            <summary>
            Resends the confirmation email for a user to the given email.
            </summary>
            <param name="email">The email of the user.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous request to the server that a confirmation email is sent. Successful
            completion indicates that the server has accepted the request and will send a confirmation email to the specified address
            if a user with that email exists.
            </returns>
        </member>
        <member name="M:Realms.Sync.App.EmailPasswordClient.SendResetPasswordEmailAsync(System.String)">
            <summary>
            Sends a password reset email to the specified address.
            </summary>
            <param name="email">the email of the user.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous request to the server that a reset password email is sent. Successful
            completion indicates that the server has accepted the request and will send a password reset email to the specified
            address if a user with that email exists.
            </returns>
        </member>
        <member name="M:Realms.Sync.App.EmailPasswordClient.ResetPasswordAsync(System.String,System.String,System.String)">
            <summary>
            Completes the reset password flow by providing the desired new password.
            </summary>
            <remarks>
            While the reset password flow is typically completed in the web app, mobile applications that have deep linking enabled can intercept the url
            and complete the password reset flow in the app itself.
            </remarks>
            <param name="password">The new password for the user.</param>
            <param name="token">The password reset token that was sent to the user's email address.</param>
            <param name="tokenId">The password reset token id that was sent together with the <paramref name="token"/> to the user's email address.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous request that a user's password is reset. Successful completion indicates that the user's password has been
            reset and they can now use the new password to create <see cref="M:Realms.Sync.Credentials.EmailPassword(System.String,System.String)"/> credentials and call <see cref="M:Realms.Sync.App.LogInAsync(Realms.Sync.Credentials)"/> to login.
            </returns>
        </member>
        <member name="M:Realms.Sync.App.EmailPasswordClient.CallResetPasswordFunctionAsync(System.String,System.String,System.Object[])">
            <summary>
            Calls the reset password function, configured on the server.
            </summary>
            <param name="email">The email of the user.</param>
            <param name="password">The new password of the user.</param>
            <param name="functionArgs">
            Any additional arguments provided to the reset function. All arguments must be serializable to JSON
            compatible values.
            </param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous request to call a password reset function. Successful completion indicates
            that the user's password has been change and they can now use the new password to create <see cref="M:Realms.Sync.Credentials.EmailPassword(System.String,System.String)"/>
            credentials and call <see cref="M:Realms.Sync.App.LogInAsync(Realms.Sync.Credentials)"/> to login.
            </returns>
        </member>
        <member name="T:Realms.Sync.AppConfiguration">
            <summary>
            A class exposing configuration options for a <see cref="T:Realms.Sync.App"/>.
            </summary>
            <seealso cref="M:Realms.Sync.App.Create(Realms.Sync.AppConfiguration)"/>.
        </member>
        <member name="P:Realms.Sync.AppConfiguration.AppId">
            <summary>
            Gets the unique app id that identifies the Realm application.
            </summary>
            <value>The MongoDB Realm App's id.</value>
        </member>
        <member name="P:Realms.Sync.AppConfiguration.BaseFilePath">
            <summary>
            Gets or sets the root folder relative to which all local data for this application will be stored. This data includes
            metadata for users and synchronized Realms.
            </summary>
            <value>The app's base path.</value>
        </member>
        <member name="P:Realms.Sync.AppConfiguration.BaseUri">
            <summary>
            Gets or sets the base url for this Realm application.
            </summary>
            <remarks>
            This only needs to be set if for some reason your application isn't hosted on realm.mongodb.com. This can be the case if you're
            testing locally or are using a preproduction environment.
            </remarks>
            <value>The app's base url.</value>
        </member>
        <member name="P:Realms.Sync.AppConfiguration.LocalAppName">
            <summary>
            Gets or sets the local app's name.
            </summary>
            <remarks>
            The local app name is typically used to differentiate between client applications that use the same
            MongoDB Realm app. These can be the same conceptual app developed for different platforms, or
            significantly different client side applications that operate on the same data - e.g. an event managing
            service that has different clients apps for organizers and attendees.
            </remarks>
            <value>The friendly name identifying the current client application.</value>
            <seealso cref="P:Realms.Sync.AppConfiguration.LocalAppVersion"/>
        </member>
        <member name="P:Realms.Sync.AppConfiguration.LocalAppVersion">
            <summary>
            Gets or sets the local app's version.
            </summary>
            <remarks>
            The local app version is typically used to differentiate between versions of the same client application.
            </remarks>
            <value>The client application's version.</value>
            <seealso cref="P:Realms.Sync.AppConfiguration.LocalAppName"/>
        </member>
        <member name="P:Realms.Sync.AppConfiguration.MetadataPersistenceMode">
            <summary>
            Gets or sets the persistence mode for user metadata on this device.
            </summary>
            <remarks>
            The default value is <see cref="F:Realms.Sync.MetadataPersistenceMode.Encrypted"/> for iOS devices and <see cref="F:Realms.Sync.MetadataPersistenceMode.NotEncrypted"/>
            for all other platforms. On iOS we integrate with the system keychain to generate and store a random encryption key the first time the app
            is launched. On other platforms, <see cref="P:Realms.Sync.AppConfiguration.MetadataEncryptionKey"/> needs to be set if <see cref="F:Realms.Sync.MetadataPersistenceMode.Encrypted"/> is
            specified.
            </remarks>
            <value>The user metadata persistence mode.</value>
        </member>
        <member name="P:Realms.Sync.AppConfiguration.MetadataEncryptionKey">
            <summary>
            Gets or sets the encryption key for user metadata on this device.
            </summary>
            <remarks>
            This will not change the encryption key for individual Realms. This should still be set in <see cref="P:Realms.RealmConfigurationBase.EncryptionKey"/>
            when opening the <see cref="T:Realms.Realm"/>.
            </remarks>
            <value>The user metadata encryption key.</value>
        </member>
        <member name="P:Realms.Sync.AppConfiguration.CustomLogger">
            <summary>
            Gets or sets a custom log function that will be invoked for each log message emitted by sync.
            </summary>
            <remarks>
            The first argument of the action is the log message itself, while the second one is the <see cref="T:Realms.Sync.LogLevel"/>
            at which the log message was emitted.
            </remarks>
            <value>The custom logger.</value>
        </member>
        <member name="P:Realms.Sync.AppConfiguration.LogLevel">
            <summary>
            Gets or sets the log level for sync operations.
            </summary>
            <value>The sync log level.</value>
        </member>
        <member name="P:Realms.Sync.AppConfiguration.DefaultRequestTimeout">
            <summary>
            Gets or sets the default request timeout for HTTP requests to MongoDB Realm.
            </summary>
            <value>The default HTTP request timeout.</value>
        </member>
        <member name="M:Realms.Sync.AppConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.Sync.AppConfiguration"/> class with the specified <paramref name="appId"/>.
            </summary>
            <param name="appId">The MongoDB Realm App id.</param>
        </member>
        <member name="T:Realms.Sync.Credentials">
            <summary>
            A class, representing the credentials used for authenticating a <see cref="T:Realms.Sync.User"/>.
            </summary>
        </member>
        <member name="T:Realms.Sync.Credentials.AuthProvider">
            <summary>
            An enum containing the possible authentication providers. These have to manually be enabled for
            your app before they can be used.
            </summary>
            <seealso href="https://docs.mongodb.com/realm/authentication/providers/">Authentication Providers Docs</seealso>
        </member>
        <member name="F:Realms.Sync.Credentials.AuthProvider.Anonymous">
            <summary>
            Mechanism for authenticating without credentials.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.AuthProvider.Facebook">
            <summary>
            OAuth2-based mechanism for logging in with an existing Facebook account.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.AuthProvider.Google">
            <summary>
            Mechanism for logging in with an existing Google account using an auth code or Id token.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.AuthProvider.Apple">
            <summary>
            OAuth2-based mechanism for logging in with an Apple ID.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.AuthProvider.JWT">
            <summary>
            Allow users to log in with JWT-based credentials generated by a service external to Realm.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.AuthProvider.EmailPassword">
            <summary>
            Mechanism for authenticating with an email and a password.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.AuthProvider.Function">
            <summary>
            Allow users to log in with arbitrary credentials according to custom authentication logic that you define
            on the server.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.AuthProvider.ApiKey">
            <summary>
            Mechanism for logging in with API keys generated by the client SDK.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.AuthProvider.ServerApiKey">
            <summary>
            Mechanism for logging in with API keys generated in the server UI.
            </summary>
        </member>
        <member name="F:Realms.Sync.Credentials.AuthProvider.Unknown">
            <summary>
            A provider that is not among the well known provider types. This is most likely the result of the server
            introducing a new provider type that this version of the SDK doesn't know about.
            </summary>
        </member>
        <member name="M:Realms.Sync.Credentials.Anonymous">
            <summary>
            Creates credentials representing an anonymous user.
            </summary>
            <returns>A Credentials that can be used to authenticate an anonymous user.</returns>
            <seealso href="https://docs.mongodb.com/realm/authentication/anonymous/">Anonymous Authentication Docs</seealso>
        </member>
        <member name="M:Realms.Sync.Credentials.Facebook(System.String)">
            <summary>
            Creates credentials representing a login using a Facebook access token.
            </summary>
            <param name="accessToken">The OAuth 2.0 access token representing the Facebook user.</param>
            <returns>A Credentials that can be used to authenticate a user with Facebook.</returns>
            <seealso href="https://docs.mongodb.com/realm/authentication/facebook/">Facebook Authentication Docs</seealso>
        </member>
        <member name="M:Realms.Sync.Credentials.Google(System.String,Realms.Sync.GoogleCredentialType)">
            <summary>
            Creates credentials representing a login using a Google account.
            </summary>
            <param name="credential">The credential representing the Google user.</param>
            <param name="type">The type of the credential.</param>
            <returns>A Credentials that can be used to authenticate a user with Google.</returns>
            <seealso href="https://docs.mongodb.com/realm/authentication/google/">Google Authentication Docs</seealso>
        </member>
        <member name="M:Realms.Sync.Credentials.Apple(System.String)">
            <summary>
            Creates credentials representing a login using an Apple ID access token.
            </summary>
            <param name="accessToken">The OAuth 2.0 access token representing the user's Apple ID.</param>
            <returns>A Credentials that can be used to authenticate a user via an Apple ID.</returns>
            <seealso href="https://docs.mongodb.com/realm/authentication/apple/">Apple ID Authentication Docs</seealso>
        </member>
        <member name="M:Realms.Sync.Credentials.JWT(System.String)">
            <summary>
            Creates credentials representing a login using a JWT Token.
            </summary>
            <param name="customToken">The custom JWT token representing the user.</param>
            <returns>A Credentials that can be used to authenticate a user with a custom JWT Token.</returns>
            <seealso href="https://docs.mongodb.com/realm/authentication/custom-jwt/">Custom JWT Authentication Docs</seealso>
        </member>
        <member name="M:Realms.Sync.Credentials.EmailPassword(System.String,System.String)">
            <summary>
            Creates credentials representing a login using an email and password.
            </summary>
            <param name="email">The user's email.</param>
            <param name="password">The user's password.</param>
            <returns>A Credentials that can be used to authenticate a user with their email and password.</returns>
            <remarks>
            A user can login with email and password only after they've registered their account and verified their
            email. To register an email/password user via the SDK, use <see cref="M:Realms.Sync.App.EmailPasswordClient.RegisterUserAsync(System.String,System.String)"/>.
            To verify an email from the SDK, use <see cref="M:Realms.Sync.App.EmailPasswordClient.ConfirmUserAsync(System.String,System.String)"/>. The email/password
            provider can also be configured to automatically confirm users or to run a custom confirmation function upon
            user registration.
            </remarks>
            <seealso href="https://docs.mongodb.com/realm/authentication/email-password/">Email/Password Authentication Docs</seealso>
        </member>
        <member name="M:Realms.Sync.Credentials.Function(System.Object)">
            <summary>
            Creates credentials represetning a login with Realm function.
            </summary>
            <param name="payload">The payload that will be passed as an argument to the server function.</param>
            <returns>A Credentials that can be used to authenticate a user by invoking a server function.</returns>
            <remarks>
            The payload object will be serialized and parsed when invoking the Realm function. This means that
            unserializable values, such as references to functions or cyclic object graphs will not work.
            Additionally, the names of the fields/properties must match exactly the names that your function
            expects.
            </remarks>
            <seealso href="https://docs.mongodb.com/realm/authentication/custom-function/">Custom Function Authentication Docs</seealso>
        </member>
        <member name="M:Realms.Sync.Credentials.ApiKey(System.String)">
            <summary>
            Creates credentials representing a login using an API key generated by a client SDK.
            </summary>
            <param name="key">The API key to use for login.</param>
            <returns>A Credentials that can be used to authenticate user with an API key.</returns>
            <seealso href="https://docs.mongodb.com/realm/authentication/api-key/">API Key Authentication Docs</seealso>
        </member>
        <member name="M:Realms.Sync.Credentials.ServerApiKey(System.String)">
            <summary>
            Creates credentials representing a login using an API key generated in the server UI.
            </summary>
            <param name="serverApiKey">The server API key to use for login.</param>
            <returns>A Credentials that can be used to authenticate user with an API key.</returns>
            <seealso href="https://docs.mongodb.com/realm/authentication/api-key/">API Key Authentication Docs</seealso>
        </member>
        <member name="P:Realms.Sync.Credentials.Provider">
            <summary>
            Gets a value indicating which <see cref="T:Realms.Sync.Credentials.AuthProvider"/> these Credentials are using.
            </summary>
            <value>The <see cref="T:Realms.Sync.Credentials.AuthProvider"/> these credentials use.</value>
        </member>
        <member name="T:Realms.Sync.GoogleCredentialType">
            <summary>
            The type of the Google credential.
            </summary>
        </member>
        <member name="F:Realms.Sync.GoogleCredentialType.AuthCode">
            <summary>
            A credential representing an auth code.
            </summary>
        </member>
        <member name="F:Realms.Sync.GoogleCredentialType.IdToken">
            <summary>
            A credential representing an Id token.
            </summary>
        </member>
        <member name="T:Realms.Sync.LogLevel">
            <summary>
            Specifies the criticality level above which messages will be logged
            by the default sync client logger.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.All">
            <summary>
            Log everything. This will seriously harm the performance of the
            sync client and should never be used in production scenarios.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Trace">
            <summary>
            A version of 'debug' that allows for very high volume output.
            This may seriously affect the performance of the sync client.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Debug">
            <summary>
            Reveal information that can aid debugging, no longer paying
            attention to efficiency.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Detail">
            <summary>
            Same as 'Info', but prioritize completeness over minimalism.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Info">
            <summary>
            Log operational sync client messages, but in a minimalistic fashion to
            avoid general overhead from logging and to keep volume down.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Warn">
            <summary>
            Log errors and warnings.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Error">
            <summary>
            Log errors only.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Fatal">
            <summary>
            Log only fatal errors.
            </summary>
        </member>
        <member name="F:Realms.Sync.LogLevel.Off">
            <summary>
            Log nothing.
            </summary>
        </member>
        <member name="T:Realms.Sync.MetadataPersistenceMode">
            <summary>
            Enumeration that specifies how and if logged-in <see cref="T:Realms.Sync.User"/> objects are persisted
            across application launches.
            </summary>
        </member>
        <member name="F:Realms.Sync.MetadataPersistenceMode.NotEncrypted">
            <summary>
            Persist <see cref="T:Realms.Sync.User"/> objects, but do not encrypt them.
            </summary>
        </member>
        <member name="F:Realms.Sync.MetadataPersistenceMode.Encrypted">
            <summary>
            Persist <see cref="T:Realms.Sync.User"/> objects in an encrypted store.
            </summary>
        </member>
        <member name="F:Realms.Sync.MetadataPersistenceMode.Disabled">
            <summary>
            Do not persist <see cref="T:Realms.Sync.User"/> objects.
            </summary>
        </member>
        <member name="T:Realms.Sync.MongoClient">
            <summary>
            The remote MongoClient used for working with data in MongoDB remotely via Realm.
            </summary>
        </member>
        <member name="P:Realms.Sync.MongoClient.ServiceName">
            <summary>
            Gets the service name for this client.
            </summary>
            <value>The name of the remote MongoDB service.</value>
        </member>
        <member name="M:Realms.Sync.MongoClient.GetDatabase(System.String)">
            <summary>
            Gets a <see cref="T:Realms.Sync.MongoClient.Database"/> instance for the given database name.
            </summary>
            <param name="name">The name of the database to retrieve.</param>
            <returns>A <see cref="T:Realms.Sync.MongoClient.Database"/> instance that exposes an API for querying its collections.</returns>
        </member>
        <member name="T:Realms.Sync.MongoClient.Database">
            <summary>
            An object representing a remote MongoDB database.
            </summary>
        </member>
        <member name="P:Realms.Sync.MongoClient.Database.Client">
            <summary>
            Gets the <see cref="T:Realms.Sync.MongoClient"/> that manages this database.
            </summary>
            <value>The database's <see cref="T:Realms.Sync.MongoClient"/>.</value>
        </member>
        <member name="P:Realms.Sync.MongoClient.Database.Name">
            <summary>
            Gets the name of the database.
            </summary>
            <value>The database name.</value>
        </member>
        <member name="M:Realms.Sync.MongoClient.Database.GetCollection(System.String)">
            <summary>
            Gets a collection from the database.
            </summary>
            <param name="name">The name of the collection.</param>
            <returns>A <see cref="T:Realms.Sync.MongoClient.Collection`1"/> instance that exposes an API for CRUD operations on its contents.</returns>
        </member>
        <member name="M:Realms.Sync.MongoClient.Database.GetCollection``1(System.String)">
            <summary>
            Gets a collection from the database.
            </summary>
            <remarks>
            The <see href="https://mongodb.github.io/mongo-csharp-driver/2.11/">MongoDB Bson</see> library is used
            to decode the response. It will automatically handle most cases, but if you want to control the behavior
            of the deserializer, you can use the attributes in the
            <see href="https://mongodb.github.io/mongo-csharp-driver/2.11/apidocs/html/N_MongoDB_Bson_Serialization_Attributes.htm">MongoDB.Bson.Serialization.Attributes</see>
            namespace.
            <br/>
            If you want to modify the global conventions used when deserializing the response, such as convert
            camelCase properties to PascalCase, you can register a
            <see href="https://mongodb.github.io/mongo-csharp-driver/2.11/reference/bson/mapping/conventions/">ConventionPack</see>.
            </remarks>
            <typeparam name="TDocument">The managed type that matches the shape of the documents in the collection.</typeparam>
            <param name="name">The name of the collection.</param>
            <returns>A <see cref="T:Realms.Sync.MongoClient.Collection`1"/> instance that exposes an API for CRUD operations on its contents.</returns>
        </member>
        <member name="T:Realms.Sync.MongoClient.Collection`1">
            <summary>
            An object representing a remote MongoDB collection.
            </summary>
            <typeparam name="TDocument">The managed type that matches the shape of the documents in the collection.</typeparam>
        </member>
        <member name="P:Realms.Sync.MongoClient.Collection`1.Database">
            <summary>
            Gets the <see cref="P:Realms.Sync.MongoClient.Collection`1.Database"/> this collection belongs to.
            </summary>
            <value>The collection's <see cref="P:Realms.Sync.MongoClient.Collection`1.Database"/>.</value>
        </member>
        <member name="P:Realms.Sync.MongoClient.Collection`1.Name">
            <summary>
            Gets the name of the collection.
            </summary>
            <value>The collection name.</value>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.InsertOneAsync(`0)">
            <summary>
            Inserts the provided document in the collection.
            </summary>
            <param name="doc">The document to insert.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> representing the remote insert operation. The result of the task
            contains the <c>_id</c> of the inserted document.
            </returns>
            <seealso href="https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/"/>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.InsertManyAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts one or more documents in the collection.
            </summary>
            <param name="docs">The documents to insert.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> representing the remote insert many operation. The result of the task
            contains the <c>_id</c>s of the inserted documents.
            </returns>
            <seealso href="https://docs.mongodb.com/manual/reference/method/db.collection.insertMany/"/>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.UpdateOneAsync(System.Object,System.Object,System.Boolean)">
            <summary>
            Updates a single document in the collection according to the specified arguments.
            </summary>
            <param name="filter">
            A document describing the selection criteria of the update. If not specified, the first document in the
            collection will be updated. Can only contain
            <see href="https://docs.mongodb.com/manual/reference/operator/query/#query-selectors">query selector expressions</see>.
            </param>
            <param name="updateDocument">
            A document describing the update. Can only contain
            <see href="https://docs.mongodb.com/manual/reference/operator/update/#id1">update operator expressions</see>.
            </param>
            <param name="upsert">
            A boolean controlling whether the update should insert a document if no documents match the <paramref name="filter"/>.
            Defaults to <c>false</c>.
            </param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> representing the remote update one operation. The result of the task
            contains information about the number of matched and updated documents, as well as the <c>_id</c> of the
            upserted document if <paramref name="upsert"/> was set to <c>true</c> and the operation resulted in an
            upsert.
            </returns>
            <seealso href="https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/"/>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.UpdateManyAsync(System.Object,System.Object,System.Boolean)">
            <summary>
            Updates one or more documents in the collection according to the specified arguments.
            </summary>
            <param name="filter">
            A document describing the selection criteria of the update. If not specified, all documents in the
            collection will be updated. Can only contain
            <see href="https://docs.mongodb.com/manual/reference/operator/query/#query-selectors">query selector expressions</see>.
            </param>
            <param name="updateDocument">
            A document describing the update. Can only contain
            <see href="https://docs.mongodb.com/manual/reference/operator/update/#id1">update operator expressions</see>.
            </param>
            <param name="upsert">
            A boolean controlling whether the update should insert a document if no documents match the <paramref name="filter"/>.
            Defaults to <c>false</c>.
            </param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> representing the remote update many operation. The result of the task
            contains information about the number of matched and updated documents, as well as the <c>_id</c> of the
            upserted document if <paramref name="upsert"/> was set to <c>true</c> and the operation resulted in an
            upsert.
            </returns>
            <seealso href="https://docs.mongodb.com/manual/reference/method/db.collection.updateMany/"/>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.DeleteOneAsync(System.Object)">
            <summary>
            Removes a single document from a collection. If no documents match the <paramref name="filter"/>, the collection is not modified.
            </summary>
            <param name="filter">
            A document describing the deletion criteria using <see href="https://docs.mongodb.com/manual/reference/operator/query/">query operators</see>.
            If not specified, the first document in the collection will be deleted.
            </param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> representing the remote delete one operation. The result of the task contains the number
            of deleted documents.
            </returns>
            <seealso href="https://docs.mongodb.com/manual/reference/method/db.collection.deleteOne/"/>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.DeleteManyAsync(System.Object)">
            <summary>
            Removes one or more documents from a collection. If no documents match the <paramref name="filter"/>, the collection is not modified.
            </summary>
            <param name="filter">
            A document describing the deletion criteria using <see href="https://docs.mongodb.com/manual/reference/operator/query/">query operators</see>.
            If not specified, all documents in the collection will be deleted.
            </param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> representing the remote delete many operation. The result of the task contains the number
            of deleted documents.
            </returns>
            <seealso href="https://docs.mongodb.com/manual/reference/method/db.collection.deleteMany/"/>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.FindAsync(System.Object,System.Object,System.Object,System.Nullable{System.Int64})">
            <summary>
            Finds the all documents in the collection up to <paramref name="limit"/>.
            </summary>
            <param name="filter">
            A document describing the find criteria using <see href="https://docs.mongodb.com/manual/reference/operator/query/">query operators</see>.
            If not specified, all documents in the collection will be returned.
            </param>
            <param name="sort">A document describing the sort criteria. If not specified, the order of the returned documents is not guaranteed.</param>
            <param name="projection">
            A document describing the fields to return for all matching documents. If not specified, all fields are returned.
            </param>
            <param name="limit">The maximum number of documents to return. If not specified, all documents in the collection are returned.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the remote find operation. The result of the task is an array containing the documents that match the find criteria.
            </returns>
            <seealso href="https://docs.mongodb.com/manual/reference/method/db.collection.find/"/>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.FindOneAsync(System.Object,System.Object,System.Object)">
            <summary>
            Finds the first document in the collection that satisfies the query criteria.
            </summary>
            <param name="filter">
            A document describing the find criteria using <see href="https://docs.mongodb.com/manual/reference/operator/query/">query operators</see>.
            If not specified, all documents in the collection will match the request.
            </param>
            <param name="sort">A document describing the sort criteria. If not specified, the order of the returned documents is not guaranteed.</param>
            <param name="projection">
            A document describing the fields to return for all matching documents. If not specified, all fields are returned.
            </param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> representing the remote find one operation. The result of the task is the first document that matches the find criteria.
            </returns>
            <seealso href="https://docs.mongodb.com/manual/reference/method/db.collection.findOne/"/>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.FindOneAndUpdateAsync(System.Object,System.Object,System.Object,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Finds the first document in the collection that satisfies the query criteria.
            </summary>
            <param name="filter">
            A document describing the find criteria using <see href="https://docs.mongodb.com/manual/reference/operator/query/">query operators</see>.
            If not specified, all documents in the collection will match the request.
            </param>
            <param name="updateDocument">
            A document describing the update. Can only contain
            <see href="https://docs.mongodb.com/manual/reference/operator/update/#id1">update operator expressions</see>.
            </param>
            <param name="sort">A document describing the sort criteria. If not specified, the order of the returned documents is not guaranteed.</param>
            <param name="projection">
            A document describing the fields to return for all matching documents. If not specified, all fields are returned.
            </param>
            <param name="upsert">
            A boolean controlling whether the update should insert a document if no documents match the <paramref name="filter"/>.
            Defaults to <c>false</c>.
            </param>
            <param name="returnNewDocument">
            A boolean controlling whether to return the new updated document. If set to <c>false</c> the original document
            before the update is returned. Defaults to <c>false</c>.
            </param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> representing the remote find one operation. The result of the task is the first document that matches the find criteria.
            </returns>
            <seealso href="https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndUpdate/"/>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.FindOneAndReplaceAsync(System.Object,`0,System.Object,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Finds the first document in the collection that satisfies the query criteria.
            </summary>
            <param name="filter">
            A document describing the find criteria using <see href="https://docs.mongodb.com/manual/reference/operator/query/">query operators</see>.
            If not specified, all documents in the collection will match the request.
            </param>
            <param name="replacementDoc">
            The replacement document. Cannot contain update operator expressions.
            </param>
            <param name="sort">
            A document describing the sort criteria. If not specified, the order of the returned documents is not guaranteed.
            </param>
            <param name="projection">
            A document describing the fields to return for all matching documents. If not specified, all fields are returned.
            </param>
            <param name="upsert">
            A boolean controlling whether the replace should insert a document if no documents match the <paramref name="filter"/>.
            Defaults to <c>false</c>.
            <br/>
            MongoDB will add the <c>_id</c> field to the replacement document if it is not specified in either the filter or
            replacement documents. If <c>_id</c> is present in both, the values must be equal.
            </param>
            <param name="returnNewDocument">
            A boolean controlling whether to return the replacement document. If set to <c>false</c> the original document
            before the update is returned. Defaults to <c>false</c>.
            </param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> representing the remote find one operation. The result of the task is the first document that matches the find criteria.
            </returns>
            <seealso href="https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndReplace/"/>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.FindOneAndDeleteAsync(System.Object,System.Object,System.Object)">
            <summary>
            Finds the first document in the collection that satisfies the query criteria.
            </summary>
            <param name="filter">
            A document describing the find criteria using <see href="https://docs.mongodb.com/manual/reference/operator/query/">query operators</see>.
            If not specified, all documents in the collection will match the request.
            </param>
            <param name="sort">A document describing the sort criteria. If not specified, the order of the returned documents is not guaranteed.</param>
            <param name="projection">
            A document describing the fields to return for all matching documents. If not specified, all fields are returned.
            </param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> representing the remote find one operation. The result of the task is the first document that matches the find criteria.
            </returns>
            <seealso href="https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndDelete/"/>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.AggregateAsync``1(System.Object[])">
            <summary>
            Executes an aggregation pipeline on the collection and returns the results as a <typeparamref name="TProjection"/> array.
            </summary>
            <typeparam name="TProjection">The managed type that matches the shape of the result of the pipeline.</typeparam>
            <param name="pipeline">
            Documents describing the different pipeline stages using <see href="https://docs.mongodb.com/manual/core/aggregation-pipeline/#pipeline-expressions">pipeline expressions</see>.
            </param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the remote aggregate operation. The result of the task is an array containing the documents returned
            by executing the aggregation <paramref name="pipeline"/>.
            </returns>
            <seealso href="https://docs.mongodb.com/manual/aggregation/"/>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.AggregateAsync(System.Object[])">
            <summary>
            Executes an aggregation pipeline on the collection and returns the results as a <see cref="T:MongoDB.Bson.BsonDocument"/> array.
            </summary>
            <param name="pipeline">
            Documents describing the different pipeline stages using <see href="https://docs.mongodb.com/manual/core/aggregation-pipeline/#pipeline-expressions">pipeline expressions</see>.
            </param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the remote aggregate operation. The result of the task is an array containing the documents returned
            by executing the aggregation <paramref name="pipeline"/>.
            </returns>
            <seealso href="https://docs.mongodb.com/manual/aggregation/"/>
        </member>
        <member name="M:Realms.Sync.MongoClient.Collection`1.CountAsync(System.Object,System.Nullable{System.Int64})">
            <summary>
            Counts the number of documents in the collection that match the provided <paramref name="filter"/>.
            </summary>
            <param name="filter">
            A document describing the find criteria using <see href="https://docs.mongodb.com/manual/reference/operator/query/">query operators</see>.
            If not specified, all documents in the collection will be counted.
            </param>
            <param name="limit">The maximum number of documents to count. If not specified, all documents in the collection are counted.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the remote count operation. The result of the task is the number of documents that match the
            <paramref name="filter"/> and <paramref name="limit"/> criteria.
            </returns>
        </member>
        <member name="T:Realms.Sync.MongoClient.UpdateResult">
            <summary>
            The result of <see cref="M:Realms.Sync.MongoClient.Collection`1.UpdateOneAsync(System.Object,System.Object,System.Boolean)"/> or <see cref="M:Realms.Sync.MongoClient.Collection`1.UpdateManyAsync(System.Object,System.Object,System.Boolean)"/> operation.
            </summary>
        </member>
        <member name="P:Realms.Sync.MongoClient.UpdateResult.MatchedCount">
            <summary>
            Gets the number of documents matched by the filter.
            </summary>
            <value>The number of matched documents.</value>
        </member>
        <member name="P:Realms.Sync.MongoClient.UpdateResult.ModifiedCount">
            <summary>
            Gets the number of documents modified by the operation.
            </summary>
            <value>The number of modified documents.</value>
        </member>
        <member name="P:Realms.Sync.MongoClient.UpdateResult.UpsertedId">
            <summary>
            Gets the <c>_id</c> of the inserted document if the operation resulted in an insertion.
            </summary>
            <value>The <c>_id</c> of the inserted document or <c>null</c> if the operation didn't result in an insertion.</value>
        </member>
        <member name="T:Realms.Sync.MongoClient.InsertResult">
            <summary>
            The result of <see cref="M:Realms.Sync.MongoClient.Collection`1.InsertOneAsync(`0)"/> operation.
            </summary>
        </member>
        <member name="P:Realms.Sync.MongoClient.InsertResult.InsertedId">
            <summary>
            Gets the <c>_id</c> of the inserted document.
            </summary>
            <value>The <c>_id</c> of the inserted document.</value>
        </member>
        <member name="T:Realms.Sync.MongoClient.InsertManyResult">
            <summary>
            The result of <see cref="M:Realms.Sync.MongoClient.Collection`1.InsertManyAsync(System.Collections.Generic.IEnumerable{`0})"/> operation.
            </summary>
        </member>
        <member name="P:Realms.Sync.MongoClient.InsertManyResult.InsertedIds">
            <summary>
            Gets an array containing the <c>_id</c>s of the inserted documents.
            </summary>
            <value>The <c>_id</c>s of the inserted documents.</value>
        </member>
        <member name="T:Realms.Sync.MongoClient.DeleteResult">
            <summary>
            The result of <see cref="M:Realms.Sync.MongoClient.Collection`1.DeleteOneAsync(System.Object)"/> or <see cref="M:Realms.Sync.MongoClient.Collection`1.DeleteManyAsync(System.Object)"/> operation.
            </summary>
        </member>
        <member name="P:Realms.Sync.MongoClient.DeleteResult.DeletedCount">
            <summary>
            Gets the number of deleted documents.
            </summary>
            <value>The number of deleted documents.</value>
        </member>
        <member name="T:Realms.Sync.ProgressDirection">
            <summary>
            The transfer direction (upload or download) tracked by a given progress notification subscription.
            </summary>
        </member>
        <member name="F:Realms.Sync.ProgressDirection.Upload">
            <summary>
            Monitors upload progress.
            </summary>
        </member>
        <member name="F:Realms.Sync.ProgressDirection.Download">
            <summary>
            Monitors download progress.
            </summary>
        </member>
        <member name="T:Realms.Sync.ProgressMode">
            <summary>
            The desired behavior of a progress notification subscription.
            </summary>
        </member>
        <member name="F:Realms.Sync.ProgressMode.ReportIndefinitely">
            <summary>
            The callback will be called forever, or until it is unregistered by disposing the subscription token.
            Notifications will always report the latest number of transferred bytes, and the most up-to-date number of
            total transferable bytes.
            </summary>
        </member>
        <member name="F:Realms.Sync.ProgressMode.ForCurrentlyOutstandingWork">
            <summary>
            The callback will, upon registration, store the total number of bytes to be transferred. When invoked, it will
            always report the most up-to-date number of transferable bytes out of that original number of transferable bytes.
            When the number of transferred bytes reaches or exceeds the number of transferable bytes, the callback will
            be unregistered.
            </summary>
        </member>
        <member name="T:Realms.Sync.SyncProgress">
            <summary>
            A struct containing information about the progress state at a given instant.
            </summary>
        </member>
        <member name="P:Realms.Sync.SyncProgress.TransferredBytes">
            <summary>
            Gets the number of bytes that have been transferred since subscribing for progress notifications.
            </summary>
            <value>The number of transferred bytes.</value>
        </member>
        <member name="P:Realms.Sync.SyncProgress.TransferableBytes">
            <summary>
            Gets the total number of bytes that have to be transferred since subscribing for progress notifications.
            The difference between that number and <see cref="P:Realms.Sync.SyncProgress.TransferredBytes"/> gives you the number of bytes not yet
            transferred. If the difference is 0, then all changes at the instant the callback fires have been
            successfully transferred.
            </summary>
            <value>The number of transferable bytes.</value>
        </member>
        <member name="T:Realms.Sync.Session">
            <summary>
            An object encapsulating a synchronization session. Sessions represent the communication between the client (and a local Realm file on disk),
            and the server (and a remote Realm at a given partition served by a MongoDB Realm Server). Sessions are always created by the SDK and vended
            out through various APIs. The lifespans of sessions associated with Realms are managed automatically.
            </summary>
        </member>
        <member name="E:Realms.Sync.Session.Error">
            <summary>
            Triggered when an error occurs on a session. The <c>sender</c> argument will be the session which has errored.
            </summary>
        </member>
        <member name="P:Realms.Sync.Session.State">
            <summary>
            Gets the session’s current state.
            </summary>
            <value>An enum value indicating the state of the session.</value>
        </member>
        <member name="P:Realms.Sync.Session.User">
            <summary>
            Gets the <see cref="P:Realms.Sync.Session.User"/> defined by the <see cref="T:Realms.Sync.SyncConfiguration"/> that is used to connect to MongoDB Realm.
            </summary>
            <value>The <see cref="P:Realms.Sync.Session.User"/> that was used to create the <see cref="T:Realms.Realm"/>'s <see cref="T:Realms.Sync.SyncConfiguration"/>.</value>
        </member>
        <member name="P:Realms.Sync.Session.Path">
            <summary>
            Gets the on-disk path of the Realm file backing the <see cref="T:Realms.Realm"/> this Session represents.
            </summary>
            <value>The file path.</value>
        </member>
        <member name="M:Realms.Sync.Session.GetProgressObservable(Realms.Sync.ProgressDirection,Realms.Sync.ProgressMode)">
             <summary>
             Gets an <see cref="T:System.IObservable`1"/> that can be used to track upload or download progress.
             </summary>
             <remarks>
             To start receiving notifications, you should call <see cref="M:System.IObservable`1.Subscribe(System.IObserver{`0})"/> on the returned object.
             The token returned from <see cref="M:System.IObservable`1.Subscribe(System.IObserver{`0})"/> should be retained as long as progress
             notifications are desired. To stop receiving notifications, call <see cref="M:System.IDisposable.Dispose"/>
             on the token.
             You don't need to keep a reference to the observable itself.
             The progress callback will always be called once immediately upon subscribing in order to provide
             the latest available status information.
             </remarks>
             <returns>An observable that you can subscribe to and receive progress updates.</returns>
             <param name="direction">The transfer direction (upload or download) to track in the subscription callback.</param>
             <param name="mode">The desired behavior of this progress notification block.</param>
             <example>
             <code>
             class ProgressNotifyingViewModel
             {
                 private IDisposable notificationToken;
            
                 public void ShowProgress()
                 {
                     var observable = session.GetProgressObservable(ProgressDirection.Upload, ProgressMode.ReportIndefinitely);
                     notificationToken = observable.Subscribe(progress =>
                     {
                         // Update relevant properties by accessing
                         // progress.TransferredBytes and progress.TransferableBytes
                     });
                 }
            
                 public void HideProgress()
                 {
                     notificationToken?.Dispose();
                     notificationToken = null;
                 }
             }
             </code>
             In this example we're using <see href="https://msdn.microsoft.com/en-us/library/ff402849(v=vs.103).aspx">ObservableExtensions.Subscribe</see>
             found in the <see href="https://github.com/Reactive-Extensions/Rx.NET">Reactive Extensions</see> class library.
             If you prefer not to take a dependency on it, you can create a class that implements <see cref="T:System.IObserver`1"/>
             and use it to subscribe instead.
             </example>
        </member>
        <member name="M:Realms.Sync.Session.WaitForUploadAsync">
            <summary>
            Waits for the <see cref="T:Realms.Sync.Session"/> to finish all pending uploads.
            </summary>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> that will be completed when all pending uploads for this <see cref="T:Realms.Sync.Session"/> are completed.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when a faulted session is waited on.</exception>
        </member>
        <member name="M:Realms.Sync.Session.WaitForDownloadAsync">
            <summary>
            Waits for the <see cref="T:Realms.Sync.Session"/> to finish all pending downloads.
            </summary>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> that will be completed when all pending downloads for this <see cref="T:Realms.Sync.Session"/> are completed.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when a faulted session is waited on.</exception>
        </member>
        <member name="M:Realms.Sync.Session.Stop">
            <summary>
            Stops any synchronization with the server until the Realm is re-opened again
            after fully closing it.
            <br/>
            Synchronization can be re-enabled by calling <see cref="M:Realms.Sync.Session.Start"/> again.
            </summary>
            <remarks>
            If the session is already stopped, calling this method will do nothing.
            </remarks>
        </member>
        <member name="M:Realms.Sync.Session.Start">
            <summary>
            Attempts to resume the session and enable synchronization with the server.
            </summary>
            <remarks>
            All sessions will be active by default and calling this method only makes sense if
            <see cref="M:Realms.Sync.Session.Stop"/> was called before that.
            </remarks>
        </member>
        <member name="M:Realms.Sync.Session.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Realms.Sync.Session.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Realms.Sync.SessionState">
            <summary>
            The current state of a sync session object.
            </summary>
        </member>
        <member name="F:Realms.Sync.SessionState.Active">
            <summary>
            The session is connected to the MongoDB Realm server and is actively transferring data.
            </summary>
        </member>
        <member name="F:Realms.Sync.SessionState.Inactive">
            <summary>
            The session is not currently communicating with the server.
            </summary>
        </member>
        <member name="T:Realms.Sync.User">
            <summary>
            This class represents a user in a MongoDB Realm app. The credentials are provided by various 3rd party providers (Facebook, Google, etc.).
            A user can log in to the server and, if access is granted, it is possible to synchronize the local and the remote Realm. Moreover, synchronization is halted when the user is logged out.
            It is possible to persist a user. By retrieving a user, there is no need to log in to the 3rd party provider again. Persisting a user between sessions, the user's credentials are stored locally on the device, and should be treated as sensitive data.
            </summary>
        </member>
        <member name="P:Realms.Sync.User.RefreshToken">
            <summary>
            Gets this user's refresh token. This is the user's credential for accessing MongoDB Realm data and should be treated as sensitive information.
            </summary>
            <value>A unique string that can be used for refreshing the user's credentials.</value>
        </member>
        <member name="P:Realms.Sync.User.AccessToken">
            <summary>
            Gets this user's access token. This is the user's credential for accessing MongoDB Realm data and should be treated as sensitive information.
            </summary>
            <value>A unique string that can be used to represent this user before the server.</value>
        </member>
        <member name="P:Realms.Sync.User.DeviceId">
            <summary>
            Gets a unique identifier for the device the user logged in to.
            </summary>
            <value>A unique string that identifies the current device.</value>
        </member>
        <member name="P:Realms.Sync.User.Id">
            <summary>
            Gets the Id of this user on MongoDB Realm.
            </summary>
            <value>A string that uniquely identifies that user.</value>
        </member>
        <member name="P:Realms.Sync.User.State">
            <summary>
            Gets the current state of the user.
            </summary>
            <value>A value indicating whether the user is active, logged out, or an error has occurred.</value>
        </member>
        <member name="P:Realms.Sync.User.Provider">
            <summary>
            Gets a value indicating which <see cref="T:Realms.Sync.Credentials.AuthProvider"/> this user logged in with.
            </summary>
            <value>The <see cref="T:Realms.Sync.Credentials.AuthProvider"/> used to login the user.</value>
        </member>
        <member name="P:Realms.Sync.User.App">
            <summary>
            Gets the app with which this user is associated.
            </summary>
            <value>An <see cref="P:Realms.Sync.User.App"/> instance that owns this user.</value>
        </member>
        <member name="P:Realms.Sync.User.Profile">
            <summary>
            Gets the profile information for that user.
            </summary>
            <value>A <see cref="T:Realms.Sync.UserProfile"/> object, containing information about the user's name, email, and so on.</value>
        </member>
        <member name="M:Realms.Sync.User.GetCustomData">
            <summary>
            Gets the custom user data associated with this user in the Realm app.
            </summary>
            <remarks>
            The data is only refreshed when the user's access token is refreshed or when explicitly calling <see cref="M:Realms.Sync.User.RefreshCustomDataAsync"/>.
            </remarks>
            <returns>A document containing the user data.</returns>
            <seealso href="https://docs.mongodb.com/realm/users/enable-custom-user-data/">Custom User Data Docs</seealso>
        </member>
        <member name="M:Realms.Sync.User.GetCustomData``1">
            <summary>
            Gets the custom user data associated with this user in the Realm app and parses it to the specified type.
            </summary>
            <typeparam name="T">The managed type that matches the shape of the custom data documents.</typeparam>
            <remarks>
            The data is only refreshed when the user's access token is refreshed or when explicitly calling <see cref="M:Realms.Sync.User.RefreshCustomDataAsync"/>.
            </remarks>
            <returns>A document containing the user data.</returns>
            <seealso href="https://docs.mongodb.com/realm/users/enable-custom-user-data/">Custom User Data Docs</seealso>
        </member>
        <member name="P:Realms.Sync.User.Identities">
            <summary>
            Gets a collection of all identities associated with this user.
            </summary>
            <value>The user's identities across different <see cref="T:Realms.Sync.Credentials.AuthProvider"/>s.</value>
        </member>
        <member name="P:Realms.Sync.User.ApiKeys">
            <summary>
            Gets a <see cref="T:Realms.Sync.User.ApiKeyClient"/> instance that exposes functionality for managing user API keys.
            </summary>
            <value>A <see cref="T:Realms.Sync.User.ApiKeyClient"/> instance scoped to this <see cref="T:Realms.Sync.User"/>.</value>
            <seealso href="https://docs.mongodb.com/realm/authentication/api-key/">API Keys Authentication Docs</seealso>
        </member>
        <member name="P:Realms.Sync.User.Functions">
            <summary>
            Gets a <see cref="T:Realms.Sync.User.FunctionsClient"/> instance that exposes functionality for calling remote MongoDB Realm functions.
            </summary>
            <value>A <see cref="T:Realms.Sync.User.FunctionsClient"/> instance scoped to this <see cref="T:Realms.Sync.User"/>.</value>
            <seealso href="https://docs.mongodb.com/realm/functions/">Functions Docs</seealso>
        </member>
        <member name="M:Realms.Sync.User.LogOutAsync">
            <summary>
            Removes the user's local credentials and attempts to invalidate their refresh token from the server.
            </summary>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> that represents the remote logout operation.</returns>
        </member>
        <member name="M:Realms.Sync.User.RefreshCustomDataAsync">
            <summary>
            Re-fetch the user's custom data from the server.
            </summary>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> that represents the remote refresh operation. The result is a <see cref="T:MongoDB.Bson.BsonDocument"/>
            containing the updated custom user data. The value returned by <see cref="M:Realms.Sync.User.GetCustomData"/> will also be updated with the new information.
            </returns>
        </member>
        <member name="M:Realms.Sync.User.RefreshCustomDataAsync``1">
            <summary>
            Re-fetch the user's custom data from the server.
            </summary>
            <typeparam name="T">The managed type that matches the shape of the custom data documents.</typeparam>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> that represents the remote refresh operation. The result is an object
            containing the updated custom user data. The value returned by <see cref="M:Realms.Sync.User.GetCustomData``1"/> will also be updated with the new information.
            </returns>
        </member>
        <member name="M:Realms.Sync.User.GetMongoClient(System.String)">
            <summary>
            Gets a <see cref="T:Realms.Sync.MongoClient"/> instance for accessing documents in a MongoDB database.
            </summary>
            <param name="serviceName">The name of the service as configured on the server.</param>
            <returns>A <see cref="T:Realms.Sync.MongoClient"/> instance that can interact with the databases exposed in the remote service.</returns>
        </member>
        <member name="M:Realms.Sync.User.GetPushClient(System.String)">
            <summary>
            Gets a client for interacting the with Firebase Cloud Messaging service exposed in MongoDB Realm.
            </summary>
            <remarks>
            The FCM service needs to be configured and enabled in the MongodB Realm UI before devices can register
            and receive push notifications.
            </remarks>
            <param name="serviceName">The name of the service as configured in the MongoDB Realm UI.</param>
            <returns>A client that exposes API to register/deregister push notification tokens.</returns>
            <seealso href="https://docs.mongodb.com/realm/services/send-mobile-push-notifications/index.html#send-a-push-notification">Send Mobile Push Notifications Docs</seealso>
        </member>
        <member name="M:Realms.Sync.User.LinkCredentialsAsync(Realms.Sync.Credentials)">
             <summary>
             Links the current user with a new user identity represented by the given credentials.
             </summary>
             <remarks>
             Linking a user with more credentials, mean the user can login either of these credentials. It also
             makes it possible to "upgrade" an anonymous user by linking it with e.g. Email/Password credentials.
             <br/>
             Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials must not have been used by another user.
             <br/>
             Note for email/password auth: To link a user with a new set of <see cref="M:Realms.Sync.Credentials.EmailPassword(System.String,System.String)"/> credentials, you will need to first
             register these credentials by calling <see cref="M:Realms.Sync.App.EmailPasswordClient.RegisterUserAsync(System.String,System.String)"/>.
             </remarks>
             <example>
             The following snippet shows how to associate an email and password with an anonymous user
             allowing them to login on a different device.
             <code>
             var app = App.Create("app-id")
             var user = await app.LogInAsync(Credentials.Anonymous());
            
             // This step is only needed for email password auth - a password record must exist
             // before you can link a user to it.
             await app.EmailPasswordAuth.RegisterUserAsync("email", "password");
             await user.LinkCredentialsAsync(Credentials.EmailPassword("email", "password"));
             </code>
             </example>
             <param name="credentials">The credentials to link with the current user.</param>
             <returns>
             An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> representing the remote link credentials operation. Upon successful completion, the task result
             will contain the user to which the credentials were linked.
             </returns>
        </member>
        <member name="M:Realms.Sync.User.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Realms.Sync.User.Equals(Realms.Sync.User)">
            <summary>
            Determines whether this instance and another <see cref="T:Realms.Sync.User"/> instance are equal by comparing their identities.
            </summary>
            <param name="other">The <see cref="T:Realms.Sync.User"/> instance to compare with.</param>
            <returns>true if the two instances are equal; false otherwise.</returns>
        </member>
        <member name="M:Realms.Sync.User.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Realms.Sync.User.ApiKeyClient">
            <summary>
            A class exposing functionality for users to manage API keys from the client. It is always scoped
            to a particular <see cref="T:Realms.Sync.User"/> and can only be accessed via <see cref="P:Realms.Sync.User.ApiKeys"/>.
            </summary>
        </member>
        <member name="M:Realms.Sync.User.ApiKeyClient.CreateAsync(System.String)">
            <summary>
            Creates an API key that can be used to authenticate as the user.
            </summary>
            <remarks>
            The value of the returned API key must be persisted at this time as this is the only
            time it is visible. The key is enabled when created. It can be disabled by calling
            <see cref="M:Realms.Sync.User.ApiKeyClient.DisableAsync(MongoDB.Bson.ObjectId)"/>.
            </remarks>
            <param name="name">The friendly name of the key.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation. Successful completion indicates
            that the <see cref="T:Realms.Sync.ApiKey"/> has been created on the server and its <see cref="P:Realms.Sync.ApiKey.Value"/> can
            be used to create <see cref="M:Realms.Sync.Credentials.ApiKey(System.String)"/>.
            </returns>
        </member>
        <member name="M:Realms.Sync.User.ApiKeyClient.FetchAsync(MongoDB.Bson.ObjectId)">
            <summary>
            Fetches a specific user API key by id.
            </summary>
            <param name="id">The id of the key to fetch.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous lookup operation.
            </returns>
        </member>
        <member name="M:Realms.Sync.User.ApiKeyClient.FetchAllAsync">
            <summary>
            Fetches all API keys associated with the user.
            </summary>
            <returns>
            An awaitable task representing the asynchronous lookup operation. Upon completion, the result contains
            a collection of all API keys for that user.
            </returns>
        </member>
        <member name="M:Realms.Sync.User.ApiKeyClient.DeleteAsync(MongoDB.Bson.ObjectId)">
            <summary>
            Deletes an API key by id.
            </summary>
            <param name="id">The id of the key to delete.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous delete operation.</returns>
        </member>
        <member name="M:Realms.Sync.User.ApiKeyClient.DisableAsync(MongoDB.Bson.ObjectId)">
            <summary>
            Disables an API key by id.
            </summary>
            <param name="id">The id of the key to disable.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous disable operation.</returns>
            <seealso cref="M:Realms.Sync.User.ApiKeyClient.EnableAsync(MongoDB.Bson.ObjectId)"/>
        </member>
        <member name="M:Realms.Sync.User.ApiKeyClient.EnableAsync(MongoDB.Bson.ObjectId)">
            <summary>
            Enables an API key by id.
            </summary>
            <param name="id">The id of the key to enable.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the asynchrounous enable operation.</returns>
            <seealso cref="M:Realms.Sync.User.ApiKeyClient.DisableAsync(MongoDB.Bson.ObjectId)"/>
        </member>
        <member name="T:Realms.Sync.User.FunctionsClient">
            <summary>
            A class exposing functionality for calling remote MongoDB Realm functions.
            </summary>
            <seealso href="https://docs.mongodb.com/realm/functions/">Functions Docs</seealso>
        </member>
        <member name="M:Realms.Sync.User.FunctionsClient.CallAsync(System.String,System.Object[])">
            <summary>
            Calls a remote function with the supplied arguments.
            </summary>
            <param name="name">Name of the Realm function to call.</param>
            <param name="args">Arguments that will be sent to the Realm function. They have to be json serializable values.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> wrapping the asynchronous call function operation. The result of the task is
            the value returned by the function.
            </returns>
        </member>
        <member name="M:Realms.Sync.User.FunctionsClient.CallAsync``1(System.String,System.Object[])">
            <summary>
            Calls a remote function with the supplied arguments.
            </summary>
            <remarks>
            The <see href="https://mongodb.github.io/mongo-csharp-driver/2.11/">MongoDB Bson</see> library is used
            to decode the response. It will automatically handle most cases, but if you want to control the behavior
            of the deserializer, you can use the attributes in the
            <see href="https://mongodb.github.io/mongo-csharp-driver/2.11/apidocs/html/N_MongoDB_Bson_Serialization_Attributes.htm">MongoDB.Bson.Serialization.Attributes</see>
            namespace.
            <br/>
            If you want to modify the global conventions used when deserializing the response, such as convert
            camelCase properties to PascalCase, you can register a
            <see href="https://mongodb.github.io/mongo-csharp-driver/2.11/reference/bson/mapping/conventions/">ConventionPack</see>.
            </remarks>
            <typeparam name="T">The type that the response will be decoded to.</typeparam>
            <param name="name">Name of the Realm function to call.</param>
            <param name="args">Arguments that will be sent to the Realm function. They have to be json serializable values.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> wrapping the asynchronous call function operation. The result of the task is
            the value returned by the function decoded as <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="T:Realms.Sync.User.PushClient">
            <summary>
            The Push client exposes an API to register/deregister for push notifications from a client app.
            </summary>
        </member>
        <member name="M:Realms.Sync.User.PushClient.RegisterDeviceAsync(System.String)">
            <summary>
            Registers the given Firebase Cloud Messaging registration token with the user's device on MongoDB Realm.
            </summary>
            <param name="token">The FCM registration token.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the remote operation. Successful completion indicates that the registration token was registered
            by the MongoDB Realm server and this device can now receive push notifications.
            </returns>
        </member>
        <member name="M:Realms.Sync.User.PushClient.DeregisterDeviceAsync">
            <summary>
            Deregister the user's device from Firebase Cloud Messaging.
            </summary>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> representing the remote operation. Successful completion indicates that the devices registration token
            was removed from the MongoDB Realm server and it will no longer receive push notifications.
            </returns>
        </member>
        <member name="T:Realms.Sync.UserIdentity">
            <summary>
            A class containing information about an identity associated with a user.
            </summary>
        </member>
        <member name="P:Realms.Sync.UserIdentity.Id">
            <summary>
            Gets the unique identifier for this identity.
            </summary>
            <value>The identity's Id.</value>
        </member>
        <member name="P:Realms.Sync.UserIdentity.Provider">
            <summary>
            Gets the auth provider defining this identity.
            </summary>
            <value>The identity's auth provider.</value>
        </member>
        <member name="M:Realms.Sync.UserIdentity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Realms.Sync.UserIdentity.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Realms.Sync.UserIdentity.ToString">
            <summary>
            Returns a string representation of the value.
            </summary>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="T:Realms.Sync.UserProfile">
            <summary>
            A class containing profile information about <see cref="T:Realms.Sync.User"/>.
            </summary>
        </member>
        <member name="P:Realms.Sync.UserProfile.Name">
            <summary>
            Gets the name of the user.
            </summary>
            <value>A string representing the user's name or <c>null</c> if not available.</value>
        </member>
        <member name="P:Realms.Sync.UserProfile.Email">
            <summary>
            Gets the email of the user.
            </summary>
            <value>A string representing the user's email or <c>null</c> if not available.</value>
        </member>
        <member name="P:Realms.Sync.UserProfile.PictureUrl">
            <summary>
            Gets the url for the user's profile picture.
            </summary>
            <value>A string representing the user's profile picture url or <c>null</c> if not available.</value>
        </member>
        <member name="P:Realms.Sync.UserProfile.FirstName">
            <summary>
            Gets the first name of the user.
            </summary>
            <value>A string representing the user's first name or <c>null</c> if not available.</value>
        </member>
        <member name="P:Realms.Sync.UserProfile.LastName">
            <summary>
            Gets the last name of the user.
            </summary>
            <value>A string representing the user's last name or <c>null</c> if not available.</value>
        </member>
        <member name="P:Realms.Sync.UserProfile.Gender">
            <summary>
            Gets the gender of the user.
            </summary>
            <value>A string representing the user's gender or <c>null</c> if not available.</value>
        </member>
        <member name="P:Realms.Sync.UserProfile.Birthday">
            <summary>
            Gets the birthday of the user.
            </summary>
            <value>A string representing the user's birthday or <c>null</c> if not available.</value>
        </member>
        <member name="P:Realms.Sync.UserProfile.MinAge">
            <summary>
            Gets the minimum age of the user.
            </summary>
            <value>A string representing the user's minimum age or <c>null</c> if not available.</value>
        </member>
        <member name="P:Realms.Sync.UserProfile.MaxAge">
            <summary>
            Gets the maximum age of the user.
            </summary>
            <value>A string representing the user's maximum age or <c>null</c> if not available.</value>
        </member>
        <member name="T:Realms.Sync.UserState">
            <summary>
            The state of the user object.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserState.LoggedOut">
            <summary>
            The user is logged out. Call <see cref="M:Realms.Sync.App.LogInAsync(Realms.Sync.Credentials)"/> with valid credentials to log the user back in.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserState.LoggedIn">
            <summary>
            The user is logged in, and any Realms associated with it are synchronizing with MongoDB Realm.
            </summary>
        </member>
        <member name="F:Realms.Sync.UserState.Removed">
            <summary>
            The user has been logged out and their local data has been removed.
            </summary>
        </member>
        <member name="T:Realms.EmbeddedObject">
            <summary>
            Base for any embedded object that can be persisted in a <see cref="T:Realms.Realm"/>.
            </summary>
        </member>
        <member name="P:Realms.EmbeddedObject.Parent">
            <summary>
            Gets the parent of this <see cref="T:Realms.EmbeddedObject"/>. It can be either another
            <see cref="T:Realms.EmbeddedObject"/> or a standalone <see cref="T:Realms.RealmObject"/>.
            </summary>
        </member>
        <member name="T:Realms.RealmInteger`1">
            <summary>
            A structure representing an integer value in the database. It offers API to increment the value, which produces
            correct merges during conflicts.
            </summary>
            <remarks>
            <see cref="T:Realms.RealmInteger`1"/> is implicitly convertible to and from T/>.
            <br/>
            Calling <see cref="M:Realms.RealmInteger`1.Increment"/> on a managed <see cref="T:Realms.RealmObject"/>/<see cref="T:Realms.EmbeddedObject"/>'s property must be done in a write
            transaction. When calling <see cref="M:Realms.RealmInteger`1.Increment"/> on a <see cref="T:Realms.RealmObject"/>/<see cref="T:Realms.EmbeddedObject"/> property, it will increment
            the property's value in the database, so the change will be reflected the next time this property is accessed.
            </remarks>
            <typeparam name="T">
            The integer type, represented by this <see cref="T:Realms.RealmInteger`1"/>. Supported types are <see cref="T:System.Byte"/>,
            <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, and <see cref="T:System.Int64"/>.
            </typeparam>
        </member>
        <member name="M:Realms.RealmInteger`1.Increment">
            <summary>
            Increments the integer value by 1. Inverse of <see cref="M:Realms.RealmInteger`1.Decrement"/>.
            </summary>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.Decrement">
            <summary>
            Decrements the integer value by 1. Inverse of <see cref="M:Realms.RealmInteger`1.Increment"/>.
            </summary>
            <returns>The decremented value.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.Increment(`0)">
            <summary>
            Increment the integer value by a specified amount.
            </summary>
            <returns>The incremented value.</returns>
            <param name="value">Value by which to increment.</param>
        </member>
        <member name="M:Realms.RealmInteger`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.Equals(`0)">
            <summary>
            Indicates whether this instance represents the same numeric value as the provided object.
            </summary>
            <param name="other">The object to compare with the current instance.</param>
            <returns>true if obj and this instance represent the same numeric value; otherwise, false.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Realms.RealmInteger`1.ToString">
            <summary>
            Returns the string representation of the underlying numeric value.
            </summary>
            <returns>The string representation of the numeric value.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.CompareTo(Realms.RealmInteger{`0})">
            <summary>
            Compares this instance to another <see cref="T:Realms.RealmInteger`1"/> value.
            </summary>
            <param name="other">The value to compare to.</param>
            <returns>1 if this instance is greater than <c>other</c>, 0 if the two values are equal, and -1 if <c>other</c> is larger.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.CompareTo(`0)">
            <summary>
            Compares this instance to another numeric value.
            </summary>
            <param name="other">The value to compare to.</param>
            <returns>1 if this instance is greater than <c>other</c>, 0 if the two values are equal, and -1 if <c>other</c> is larger.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> of the value represented by this <see cref="T:Realms.RealmInteger`1"/>.
            </summary>
            <returns>The enumerated constant that is the System.TypeCode of the class or value type that implements this interface.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>A Boolean value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 8-bit unsigned integer value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>A Unicode character value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> value using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.DateTime"/> value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> value using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Decimal"/> value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>A 16-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>A 32-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>A 64-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> value using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.String"/> value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="T:System.Type"/>
            that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>A 16-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>A 32-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/>interface implementation that supplies culture-specific formatting information.</param>
            <returns>A 64-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Realms.RealmInteger`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">
            The format to use. -or- A null reference to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.
            </param>
            <param name="formatProvider">
            The provider to use to format the value. -or- A null reference to obtain the numeric format
            information from the current locale setting of the operating system.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="T:Realms.RealmList`1">
            <summary>
            Return type for a managed object property when you declare a to-many relationship with IList.
            </summary>
            <remarks>Relationships are ordered and preserve their order, hence the ability to use ordinal
            indexes in calls such as Insert and RemoveAt.
            </remarks>
            <typeparam name="T">Type of the <see cref="T:Realms.RealmObject"/>, <see cref="T:Realms.EmbeddedObject"/>, or primitive which is contained by the list.</typeparam>
        </member>
        <member name="T:Realms.IRealmList">
            <summary>
            IRealmList is only implemented by RealmList and serves to expose the ListHandle without knowing the generic param.
            </summary>
        </member>
        <member name="P:Realms.IRealmList.NativeHandle">
            <summary>
            Gets the native handle for that list.
            </summary>
        </member>
        <member name="P:Realms.IRealmList.Metadata">
            <summary>
            Gets the metadata for the objects contained in the list.
            </summary>
        </member>
        <member name="T:Realms.RealmObject">
            <summary>
            Base for any object that can be persisted in a <see cref="T:Realms.Realm"/>.
            </summary>
        </member>
        <member name="T:Realms.RealmObjectBase">
            <summary>
            Base for any object that can be persisted in a <see cref="P:Realms.RealmObjectBase.Realm"/>.
            </summary>
        </member>
        <member name="E:Realms.RealmObjectBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Realms.RealmObjectBase.IsManaged">
            <summary>
            Gets a value indicating whether the object has been associated with a Realm, either at creation or via
            <see cref="M:Realms.Realm.Add``1(``0,System.Boolean)"/>.
            </summary>
            <value><c>true</c> if object belongs to a Realm; <c>false</c> if standalone.</value>
        </member>
        <member name="P:Realms.RealmObjectBase.IsValid">
            <summary>
            Gets a value indicating whether this object is managed and represents a row in the database.
            If a managed object has been removed from the Realm, it is no longer valid and accessing properties on it
            will throw an exception.
            Unmanaged objects are always considered valid.
            </summary>
            <value><c>true</c> if managed and part of the Realm or unmanaged; <c>false</c> if managed but deleted.</value>
        </member>
        <member name="P:Realms.RealmObjectBase.IsFrozen">
            <summary>
            Gets a value indicating whether this object is frozen. Frozen objects are immutable
            and will not update when writes are made to the Realm. Unlike live objects, frozen
            objects can be used across threads.
            </summary>
            <seealso cref="M:Realms.FrozenObjectsExtensions.Freeze``1(``0)"/>
        </member>
        <member name="P:Realms.RealmObjectBase.Realm">
            <summary>
            Gets the <see cref="P:Realms.RealmObjectBase.Realm"/> instance this object belongs to, or <c>null</c> if it is unmanaged.
            </summary>
            <value>The <see cref="P:Realms.RealmObjectBase.Realm"/> instance this object belongs to.</value>
        </member>
        <member name="P:Realms.RealmObjectBase.ObjectSchema">
            <summary>
            Gets the <see cref="T:Realms.Schema.ObjectSchema"/> instance that describes how the <see cref="P:Realms.RealmObjectBase.Realm"/> this object belongs to sees it.
            </summary>
            <value>A collection of properties describing the underlying schema of this object.</value>
        </member>
        <member name="P:Realms.RealmObjectBase.BacklinksCount">
            <summary>
            Gets the number of objects referring to this one via either a to-one or to-many relationship.
            </summary>
            <remarks>
            This property is not observable so the <see cref="E:Realms.RealmObjectBase.PropertyChanged"/> event will not fire when its value changes.
            </remarks>
        </member>
        <member name="P:Realms.RealmObjectBase.Realms#IThreadConfined#Metadata">
            <inheritdoc/>
        </member>
        <member name="P:Realms.RealmObjectBase.Realms#IThreadConfined#Handle">
            <inheritdoc/>
        </member>
        <member name="M:Realms.RealmObjectBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Realms.RealmObjectBase"/> class.
            </summary>
        </member>
        <member name="M:Realms.RealmObjectBase.GetBacklinks(System.String,System.String)">
            <summary>
            Returns all the objects that link to this object in the specified relationship.
            </summary>
            <param name="objectType">The type of the object that is on the other end of the relationship.</param>
            <param name="property">The property that is on the other end of the relationship.</param>
            <returns>A queryable collection containing all objects of <c>objectType</c> that link to the current object via <c>property</c>.</returns>
        </member>
        <member name="M:Realms.RealmObjectBase.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Realms.RealmObjectBase.RaisePropertyChanged(System.String)">
            <summary>
            Allows you to raise the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed. If not specified, we'll use the caller name.</param>
        </member>
        <member name="M:Realms.RealmObjectBase.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has changed on this class.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <remarks>
            For this method to be called, you need to have first subscribed to <see cref="E:Realms.RealmObjectBase.PropertyChanged"/>.
            This can be used to react to changes to the current object, e.g. raising <see cref="E:Realms.RealmObjectBase.PropertyChanged"/> for computed properties.
            </remarks>
            <example>
            <code>
            class MyClass : RealmObject
            {
                public int StatusCodeRaw { get; set; }
                public StatusCodeEnum StatusCode => (StatusCodeEnum)StatusCodeRaw;
                protected override void OnPropertyChanged(string propertyName)
                {
                    if (propertyName == nameof(StatusCodeRaw))
                    {
                        RaisePropertyChanged(nameof(StatusCode));
                    }
                }
            }
            </code>
            Here, we have a computed property that depends on a persisted one. In order to notify any <see cref="E:Realms.RealmObjectBase.PropertyChanged"/>
            subscribers that <c>StatusCode</c> has changed, we override <see cref="M:Realms.RealmObjectBase.OnPropertyChanged(System.String)"/> and
            raise <see cref="E:Realms.RealmObjectBase.PropertyChanged"/> manually by calling <see cref="M:Realms.RealmObjectBase.RaisePropertyChanged(System.String)"/>.
            </example>
        </member>
        <member name="M:Realms.RealmObjectBase.OnManaged">
            <summary>
            Called when the object has been managed by a Realm.
            </summary>
            <remarks>
            This method will be called either when a managed object is materialized or when an unmanaged object has been
            added to the Realm. It can be useful for providing some initialization logic as when the constructor is invoked,
            it is not yet clear whether the object is managed or not.
            </remarks>
        </member>
        <member name="M:Realms.RealmObjectBase.Realms#NotificationsHelper#INotifiable#NotifyCallbacks(System.Nullable{Realms.NotifiableObjectHandleBase.CollectionChangeSet},System.Nullable{Realms.NativeException})">
            <inheritdoc/>
        </member>
        <member name="T:Realms.RealmValue">
             <summary>
             A type that can represent any valid Realm data type. It is a valid type in and of itself,
             which means that it can be used to declare a property of type <see cref="T:Realms.RealmValue"/> that
             can hold any type.
             </summary>
             <example>
             <code>
             public class MyClass : RealmObject
             {
                 public RealmValue MyValue { get; set; }
             }
            
             var obj = new MyClass();
             obj.MyValue = 123;
             obj.MyValue = "abc";
            
             if (obj.Type == RealmValueType.Int)
             {
                 var myInt = obj.MyValue.AsLong();
             }
             </code>
             </example>
        </member>
        <member name="P:Realms.RealmValue.Type">
            <summary>
            Gets the <see cref="T:Realms.RealmValueType"/> stored in this value.
            </summary>
            <remarks>
            You can check the type of the Realm value and then use any of the AsXXX methods to convert it to correct C# type.
            <br/>
            For performance reasons, all integral types, i.e. <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>,
            as well as <see cref="T:System.Char"/> are represented as <see cref="F:Realms.RealmValueType.Int"/>. Realm preserves no information about the original
            type of the integral value stored in a <see cref="T:Realms.RealmValue"/> field.
            </remarks>
            <value>The <see cref="T:Realms.RealmValueType"/> of the current value in the database.</value>
        </member>
        <member name="M:Realms.RealmValue.AsChar">
            <summary>
            Returns the stored value as a <see cref="T:System.Char"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/>.</exception>
            <returns>A UTF-16 code unit representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsByte">
            <summary>
            Returns the stored value as a <see cref="T:System.Byte"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/>.</exception>
            <returns>An 8-bit unsigned integer representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsByteRealmInteger"/>
        </member>
        <member name="M:Realms.RealmValue.AsInt16">
            <summary>
            Returns the stored value as a <see cref="T:System.Int16"/> (Int16).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/>.</exception>
            <returns>A 16-bit integer representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsInt16RealmInteger"/>
        </member>
        <member name="M:Realms.RealmValue.AsInt32">
            <summary>
            Returns the stored value as an <see cref="T:System.Int32"/> (Int32).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/>.</exception>
            <returns>A 32-bit integer representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsInt32RealmInteger"/>
        </member>
        <member name="M:Realms.RealmValue.AsInt64">
            <summary>
            Returns the stored value as a <see cref="T:System.Int64"/> (Int64).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/>.</exception>
            <returns>A 64-bit integer representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsInt64RealmInteger"/>
        </member>
        <member name="M:Realms.RealmValue.AsFloat">
            <summary>
            Returns the stored value as a <see cref="T:System.Single"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Float"/>.</exception>
            <returns>A 32-bit floating point number representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsDouble">
            <summary>
            Returns the stored value as a <see cref="T:System.Double"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Double"/>.</exception>
            <returns>A 64-bit floating point number representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsBool">
            <summary>
            Returns the stored value as a <see cref="T:System.Boolean"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Bool"/>.</exception>
            <returns>A boolean representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsDate">
            <summary>
            Returns the stored value as a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Date"/>.</exception>
            <returns>A DateTimeOffset value representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsDecimal">
            <summary>
            Returns the stored value as a <see cref="T:System.Decimal"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Decimal128"/>.</exception>
            <returns>A 96-bit decimal number representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsDecimal128">
            <summary>
            Returns the stored value as a <see cref="T:MongoDB.Bson.Decimal128"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Decimal128"/>.</exception>
            <returns>A 128-bit decimal number representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsObjectId">
            <summary>
            Returns the stored value as an <see cref="T:MongoDB.Bson.ObjectId"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.ObjectId"/>.</exception>
            <returns>An ObjectId representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsGuid">
            <summary>
            Returns the stored value as a <see cref="T:System.Guid"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Guid"/>.</exception>
            <returns>A Guid representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsByteRealmInteger">
            <summary>
            Returns the stored value as a <see cref="T:Realms.RealmInteger`1"/>. It offers Increment/Decrement API that preserve intent when merging
            conflicts.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/>.</exception>
            <returns> An 8-bit <see cref="T:Realms.RealmInteger`1"/> representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsByte"/>
        </member>
        <member name="M:Realms.RealmValue.AsInt16RealmInteger">
            <summary>
            Returns the stored value as a <see cref="T:Realms.RealmInteger`1"/>. It offers Increment/Decrement API that preserve intent when merging
            conflicts.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/>.</exception>
            <returns> An 16-bit <see cref="T:Realms.RealmInteger`1"/> representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsInt16"/>
        </member>
        <member name="M:Realms.RealmValue.AsInt32RealmInteger">
            <summary>
            Returns the stored value as a <see cref="T:Realms.RealmInteger`1"/>. It offers Increment/Decrement API that preserve intent when merging
            conflicts.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/>.</exception>
            <returns> An 32-bit <see cref="T:Realms.RealmInteger`1"/> representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsInt32"/>
        </member>
        <member name="M:Realms.RealmValue.AsInt64RealmInteger">
            <summary>
            Returns the stored value as a <see cref="T:Realms.RealmInteger`1"/>. It offers Increment/Decrement API that preserve intent when merging
            conflicts.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/>.</exception>
            <returns> An 64-bit <see cref="T:Realms.RealmInteger`1"/> representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsInt64"/>
        </member>
        <member name="M:Realms.RealmValue.AsNullableChar">
            <summary>
            Returns the stored value as a nullable <see cref="T:System.Char"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>A nullable UTF-16 code unit representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsNullableByte">
            <summary>
            Returns the stored value as a nullable <see cref="T:System.Byte"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>A nullable 8-bit unsigned integer representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsNullableByteRealmInteger"/>
        </member>
        <member name="M:Realms.RealmValue.AsNullableInt16">
            <summary>
            Returns the stored value as a nullable <see cref="T:System.Int16"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>A nullable 16-bit integer representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsNullableInt16RealmInteger"/>
        </member>
        <member name="M:Realms.RealmValue.AsNullableInt32">
            <summary>
            Returns the stored value as a nullable <see cref="T:System.Int32"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>A nullable 32-bit integer representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsNullableInt32RealmInteger"/>
        </member>
        <member name="M:Realms.RealmValue.AsNullableInt64">
            <summary>
            Returns the stored value as a nullable <see cref="T:System.Int64"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>A nullable 64-bit integer representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsNullableInt64RealmInteger"/>
        </member>
        <member name="M:Realms.RealmValue.AsNullableByteRealmInteger">
            <summary>
            Returns the stored value as a nullable <see cref="T:Realms.RealmInteger`1"/>. It offers Increment/Decrement API that preserve intent when merging
            conflicts.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns> A nullable 8-bit <see cref="T:Realms.RealmInteger`1"/> representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsNullableByte"/>
        </member>
        <member name="M:Realms.RealmValue.AsNullableInt16RealmInteger">
            <summary>
            Returns the stored value as a nullable <see cref="T:Realms.RealmInteger`1"/>. It offers Increment/Decrement API that preserve intent when merging
            conflicts.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns> A nullable 16-bit <see cref="T:Realms.RealmInteger`1"/> representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsNullableInt16"/>
        </member>
        <member name="M:Realms.RealmValue.AsNullableInt32RealmInteger">
            <summary>
            Returns the stored value as a nullable <see cref="T:Realms.RealmInteger`1"/>. It offers Increment/Decrement API that preserve intent when merging
            conflicts.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns> A nullable 32-bit <see cref="T:Realms.RealmInteger`1"/> representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsNullableInt32"/>
        </member>
        <member name="M:Realms.RealmValue.AsNullableInt64RealmInteger">
            <summary>
            Returns the stored value as a nullable <see cref="T:Realms.RealmInteger`1"/>. It offers Increment/Decrement API that preserve intent when merging
            conflicts.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Int"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns> A nullable 64-bit <see cref="T:Realms.RealmInteger`1"/> representing the value stored in the database.</returns>
            <seealso cref="M:Realms.RealmValue.AsNullableInt64"/>
        </member>
        <member name="M:Realms.RealmValue.AsNullableFloat">
            <summary>
            Returns the stored value as a nullable <see cref="T:System.Single"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Float"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>A nullable 32-bit floating point number representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsNullableDouble">
            <summary>
            Returns the stored value as a nullable <see cref="T:System.Double"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Double"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>A nullable 64-bit floating point number representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsNullableBool">
            <summary>
            Returns the stored value as a nullable <see cref="T:System.Boolean"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Bool"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>A nullable boolean representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsNullableDate">
            <summary>
            Returns the stored value as a nullable <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Date"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>A nullable DateTimeOffset value representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsNullableDecimal">
            <summary>
            Returns the stored value as a nullable <see cref="T:System.Decimal"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Decimal128"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>A nullable 96-bit decimal number representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsNullableDecimal128">
            <summary>
            Returns the stored value as a nullable <see cref="T:MongoDB.Bson.Decimal128"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Date"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>A nullable 128-bit decimal number representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsNullableObjectId">
            <summary>
            Returns the stored value as a nullable <see cref="T:MongoDB.Bson.ObjectId"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.ObjectId"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>A nullable ObjectId representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsNullableGuid">
            <summary>
            Returns the stored value as a nullable <see cref="T:System.Guid"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Guid"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>A nullable Guid representing the value stored in the database.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsData">
            <summary>
            Returns the stored value as an array of bytes.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Data"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>
            An array of bytes representing the value stored in the database. It will be <c>null</c> if <see cref="P:Realms.RealmValue.Type"/> is <see cref="F:Realms.RealmValueType.Null"/>.
            </returns>
        </member>
        <member name="M:Realms.RealmValue.AsString">
            <summary>
            Returns the stored value as a string.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.String"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>
            A string representing the value stored in the database. It will be <c>null</c> if <see cref="P:Realms.RealmValue.Type"/> is <see cref="F:Realms.RealmValueType.Null"/>.
            </returns>
        </member>
        <member name="M:Realms.RealmValue.AsRealmObject">
            <summary>
            Returns the stored value as a <see cref="T:Realms.RealmObjectBase"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Object"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <returns>
            A <see cref="T:Realms.RealmObjectBase"/> instance representing the value stored in the database. It will be <c>null</c> if <see cref="P:Realms.RealmValue.Type"/> is <see cref="F:Realms.RealmValueType.Null"/>.
            </returns>
        </member>
        <member name="M:Realms.RealmValue.AsRealmObject``1">
            <summary>
            Returns the stored value as a <typeparamref name="T"/> which inherits from <see cref="T:Realms.RealmObjectBase"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the underlying value is not of type <see cref="F:Realms.RealmValueType.Object"/> or <see cref="F:Realms.RealmValueType.Null"/>.
            </exception>
            <typeparam name="T">The type of the object stored in the database.</typeparam>
            <returns>
            A <see cref="T:Realms.RealmObjectBase"/> instance representing the value stored in the database. It will be <c>null</c> if <see cref="P:Realms.RealmValue.Type"/> is <see cref="F:Realms.RealmValueType.Null"/>.
            </returns>
        </member>
        <member name="M:Realms.RealmValue.As``1">
            <summary>
            Returns the stored value converted to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to which to convert the value.</typeparam>
            <exception cref="T:System.InvalidCastException">Thrown if the type is not convertible to <typeparamref name="T"/>.</exception>
            <returns>The underlying value converted to <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Realms.RealmValue.AsAny">
            <summary>
            Returns the stored value boxed in <see cref="T:System.Object"/>.
            </summary>
            <returns>The underlying value.</returns>
        </member>
        <member name="M:Realms.RealmValue.ToString">
            <summary>
            Returns the string representation of this <see cref="T:Realms.RealmValue"/>.
            </summary>
            <returns>A string describing the value.</returns>
        </member>
        <member name="M:Realms.RealmValue.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Realms.RealmValue.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Realms.RealmValue.Equals(Realms.RealmValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="T:Realms.RealmValueType">
            <summary>
            Represents the type of a value stored in a <see cref="T:Realms.RealmValue"/> property.
            </summary>
        </member>
        <member name="F:Realms.RealmValueType.Null">
            <summary>
            The value is <c>null</c>.
            </summary>
        </member>
        <member name="F:Realms.RealmValueType.Int">
            <summary>
            The value is a <see cref="T:System.Int64"/>.
            </summary>
            <remarks>
            For performance reasons, all integers, as well as <see cref="T:System.Char"/>, in Realm are stored as 64-bit values.
            You can still cast it to the narrower types using <see cref="M:Realms.RealmValue.AsByte"/>, <see cref="M:Realms.RealmValue.AsInt16"/>,
            <see cref="M:Realms.RealmValue.AsInt32"/>, or <see cref="M:Realms.RealmValue.AsChar"/>.
            </remarks>
        </member>
        <member name="F:Realms.RealmValueType.Bool">
            <summary>
            The value represents a <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="F:Realms.RealmValueType.String">
            <summary>
            The value represents a non-null <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:Realms.RealmValueType.Data">
            <summary>
            The value represents a non-null byte array.
            </summary>
        </member>
        <member name="F:Realms.RealmValueType.Date">
            <summary>
            The value represents a <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="F:Realms.RealmValueType.Float">
            <summary>
            The value represents a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:Realms.RealmValueType.Double">
            <summary>
            The value represents a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:Realms.RealmValueType.Decimal128">
            <summary>
            The value represents a <see cref="T:MongoDB.Bson.Decimal128"/>.
            </summary>
            <remarks>
            For performance reasons, all decimals in Realm are stored as 128-bit values.
            You can still cast it to the 96-bit <see cref="T:System.Decimal"/> using <see cref="M:Realms.RealmValue.AsDecimal"/>.
            </remarks>
        </member>
        <member name="F:Realms.RealmValueType.ObjectId">
            <summary>
            The value represents a <see cref="T:MongoDB.Bson.ObjectId"/>.
            </summary>
        </member>
        <member name="F:Realms.RealmValueType.Object">
            <summary>
            The value represents a link to another object.
            </summary>
        </member>
        <member name="F:Realms.RealmValueType.Guid">
            <summary>
            The value represents a <see cref="F:Realms.RealmValueType.Guid"/>.
            </summary>
        </member>
        <member name="T:Realms.ErrorEventArgs">
            <summary>
            Provides error information for the <see cref="E:Realms.Realm.Error"/> event.
            </summary>
        </member>
        <member name="P:Realms.ErrorEventArgs.Exception">
            <summary>
            Gets the <see cref="P:Realms.ErrorEventArgs.Exception"/> that represents the error that occurred.
            </summary>
            <value>The exception that has occurred.</value>
        </member>
        <member name="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            <summary>
            An exception thrown when trying to lookup an object by primary key, when the object doesn't have <see cref="T:Realms.PrimaryKeyAttribute"/> specified.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmClosedException">
            <summary>
            An exception thrown when trying to invoke members of a closed <see cref="T:Realms.Realm"/>.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmDecryptionFailedException">
            <summary>
            An exception, raised when file decryption is unsuccessful, most likely due to invalid
            <see cref="P:Realms.RealmConfigurationBase.EncryptionKey"/>.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmDuplicatePrimaryKeyValueException">
            <summary>
            An exception thrown when an object with the same primary key has already been added.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmException">
            <summary>
            Base for Realm specific exceptions.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmExceptionCodes">
            <summary>Codes used in forwarding exceptions from the native C++ core, to be regenerated in C#.</summary>
            <remarks> <b>Warning:</b> Keep these codes aligned with realm_error_type.hpp in wrappers.</remarks>
        </member>
        <member name="T:Realms.Exceptions.RealmFileAccessErrorException">
            <summary>
            Base for catching exceptions with Realm files, typically problems from which an app would recover.
            </summary>
            <remarks>
            You can catch any of the subclasses independently but any File-level error which could be handled by an application descends from this type.
            </remarks>
        </member>
        <member name="T:Realms.Exceptions.RealmFileExistsException">
            <summary>
            Exception thrown when a file with the same name already exists.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmFileNotFoundException">
            <summary>
            Exception thrown when trying to open a file that does not exist.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmFrozenException">
            <summary>
            Exception thrown when trying to subscribe to changes or modify a frozen <see cref="T:Realms.Realm"/>, <see cref="T:Realms.RealmObject"/>,
            <see cref="T:Realms.EmbeddedObject"/>, or <see cref="T:Realms.IRealmCollection`1"/>.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmInvalidDatabaseException">
            <summary>
            Exception thrown when a file exists but doesn't appear to be a Realm database, may indicate corruption.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmInvalidObjectException">
            <summary>
            An exception, thrown when the object is no longer managed by the <see cref="T:Realms.Realm"/>.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmInvalidTransactionException">
            <summary>
            An exception, thrown when trying to write data to the <see cref="T:Realms.Realm"/> outside a <see cref="T:Realms.Transaction"/>
            or when trying to create a transaction on a <see cref="T:Realms.Realm"/> that is opened as read-only.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmMigrationNeededException">
            <summary>
            Exception thrown when attempting to open a file whose <see cref="T:Realms.Schema.RealmSchema"/> differs from your current class declarations.
            </summary>
            <seealso href="https://realm.io/docs/xamarin/latest/#migrations">Read more about Migrations.</seealso>
        </member>
        <member name="T:Realms.Exceptions.RealmMismatchedConfigException">
            <summary>
            An exception thrown when you try to open a Realm file with a different <see cref="T:Realms.RealmConfigurationBase"/>.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmObjectManagedByAnotherRealmException">
            <summary>
            Exception thrown when you're trying to use <see cref="M:Realms.Realm.Add``1(``0,System.Boolean)"/> but the object is already managed by a
            different <see cref="T:Realms.Realm"/>.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmOutOfMemoryException">
            <summary>
            Exception when Realm's run out of memory, shut down your application rather than trying to continue.
            </summary>
        </member>
        <member name="T:Realms.Exceptions.RealmPermissionDeniedException">
            <summary>
            Exception when you can't open an existing realm file, or create a new one.
            </summary>
            <remarks>
            May be seen in testing if you have crashed a unit test but an external test runner is still going.
            </remarks>
        </member>
        <member name="T:Realms.CollectionExtensions">
            <summary>
            A set of extensions methods exposing notification-related functionality over collections.
            </summary>
        </member>
        <member name="M:Realms.CollectionExtensions.AsRealmCollection``1(System.Linq.IQueryable{``0})">
            <summary>
            A convenience method that casts <see cref="T:System.Linq.IQueryable`1"/> to <see cref="T:Realms.IRealmCollection`1"/> which
            implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </summary>
            <param name="query">The <see cref="T:System.Linq.IQueryable`1" /> to observe for changes.</param>
            <typeparam name="T">Type of the <see cref="T:Realms.RealmObject"/> or <see cref="T:Realms.EmbeddedObject"/> in the results.</typeparam>
            <seealso cref="M:Realms.IRealmCollection`1.SubscribeForNotifications(Realms.NotificationCallbackDelegate{`0})"/>
            <returns>The collection, implementing <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.</returns>
        </member>
        <member name="M:Realms.CollectionExtensions.SubscribeForNotifications``1(System.Linq.IQueryable{``0},Realms.NotificationCallbackDelegate{``0})">
            <summary>
            A convenience method that casts <see cref="T:System.Linq.IQueryable`1"/> to <see cref="T:Realms.IRealmCollection`1"/> and subscribes for change notifications.
            </summary>
            <param name="results">The <see cref="T:System.Linq.IQueryable`1" /> to observe for changes.</param>
            <typeparam name="T">Type of the <see cref="T:Realms.RealmObject"/> or <see cref="T:Realms.EmbeddedObject"/> in the results.</typeparam>
            <seealso cref="M:Realms.IRealmCollection`1.SubscribeForNotifications(Realms.NotificationCallbackDelegate{`0})"/>
            <param name="callback">The callback to be invoked with the updated <see cref="T:Realms.IRealmCollection`1" />.</param>
            <returns>
            A subscription token. It must be kept alive for as long as you want to receive change notifications.
            To stop receiving notifications, call <see cref="M:System.IDisposable.Dispose" />.
            </returns>
        </member>
        <member name="M:Realms.CollectionExtensions.AsRealmCollection``1(System.Collections.Generic.IList{``0})">
            <summary>
            A convenience method that casts <see cref="T:System.Collections.Generic.IList`1"/> to <see cref="T:Realms.IRealmCollection`1"/> which implements
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1" /> to observe for changes.</param>
            <typeparam name="T">Type of the objects in the list.</typeparam>
            <seealso cref="M:Realms.IRealmCollection`1.SubscribeForNotifications(Realms.NotificationCallbackDelegate{`0})"/>
            <returns>The collection, implementing <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.</returns>
        </member>
        <member name="M:Realms.CollectionExtensions.SubscribeForNotifications``1(System.Collections.Generic.IList{``0},Realms.NotificationCallbackDelegate{``0})">
            <summary>
            A convenience method that casts <see cref="T:System.Collections.Generic.IList`1" /> to <see cref="T:Realms.IRealmCollection`1"/> and subscribes for change notifications.
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1" /> to observe for changes.</param>
            <typeparam name="T">Type of the objects in the list.</typeparam>
            <seealso cref="M:Realms.IRealmCollection`1.SubscribeForNotifications(Realms.NotificationCallbackDelegate{`0})"/>
            <param name="callback">The callback to be invoked with the updated <see cref="T:Realms.IRealmCollection`1" />.</param>
            <returns>
            A subscription token. It must be kept alive for as long as you want to receive change notifications.
            To stop receiving notifications, call <see cref="M:System.IDisposable.Dispose" />.
            </returns>
        </member>
        <member name="M:Realms.CollectionExtensions.Move``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Move the specified item to a new position within the list.
            </summary>
            <param name="list">The list where the move should occur.</param>
            <param name="item">The item that will be moved.</param>
            <param name="index">The new position to which the item will be moved.</param>
            <typeparam name="T">Type of the objects in the list.</typeparam>
            <remarks>
            This extension method will work for standalone lists as well by calling <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
            and then <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is less than 0 or greater than <see cref="P:System.Collections.Generic.ICollection`1.Count"/> - 1.</exception>
        </member>
        <member name="M:Realms.CollectionExtensions.Move``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Move the specified item to a new position within the list.
            </summary>
            <param name="list">The list where the move should occur.</param>
            <param name="from">The index of the item that will be moved.</param>
            <param name="to">The new position to which the item will be moved.</param>
            <typeparam name="T">Type of the objects  in the list.</typeparam>
            <remarks>
            This extension method will work for standalone lists as well by calling <see cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)"/>
            and then <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is less than 0 or greater than <see cref="P:System.Collections.Generic.ICollection`1.Count"/> - 1.</exception>
        </member>
        <member name="M:Realms.CollectionExtensions.Filter``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Apply an NSPredicate-based filter over a collection. It can be used to create
            more complex queries, that are currently unsupported by the LINQ provider and
            supports SORT and DISTINCT clauses in addition to filtering.
            </summary>
            <typeparam name="T">The type of the objects that will be filtered.</typeparam>
            <param name="query">
            A Queryable collection, obtained by calling <see cref="M:Realms.Realm.All``1"/>.
            </param>
            <param name="predicate">The predicate that will be applied.</param>
            <returns>A queryable observable collection of objects that match the predicate.</returns>
            <remarks>
            This method can be used in combination with LINQ filtering, but it is strongly recommended
            to avoid combining it if a <c>SORT</c> clause appears in the predicate.
            <para/>
            If you're not going to apply additional filters, it's recommended to use <see cref="M:Realms.CollectionExtensions.AsRealmCollection``1(System.Linq.IQueryable{``0})"/>
            after applying the predicate.
            </remarks>
            <example>
            <code>
            var results1 = realm.All&lt;Foo&gt;("Bar.IntValue > 0");
            var results2 = realm.All&lt;Foo&gt;("Bar.IntValue > 0 SORT(Bar.IntValue ASC Bar.StringValue DESC)");
            var results3 = realm.All&lt;Foo&gt;("Bar.IntValue > 0 SORT(Bar.IntValue ASC Bar.StringValue DESC) DISTINCT(Bar.IntValue)");
            </code>
            </example>
            <seealso href="https://github.com/realm/realm-js/blob/master/docs/tutorials/query-language.md">
            Examples of the NSPredicate syntax
            </seealso>
            <seealso href="https://academy.realm.io/posts/nspredicate-cheatsheet/">NSPredicate Cheatsheet</seealso>
        </member>
        <member name="T:Realms.FrozenObjectsExtensions">
            <summary>
            A set of extension methods on top of RealmObjectBase.
            </summary>
        </member>
        <member name="M:Realms.FrozenObjectsExtensions.Freeze``1(``0)">
            <summary>
            Returns a frozen snapshot of this object. The frozen copy can be read and queried from any thread without throwing an exception.
            <para/>
            Freezing a RealmObjectBase also creates a frozen Realm which has its own lifecycle, but if the live Realm that spawned the
            original object is fully closed (i.e. all instances across all threads are closed), the frozen Realm and
            object will be closed as well.
            <para/>
            Frozen objects can be queried as normal, but trying to mutate it in any way or attempting to subscribe for notifications will
            throw a <see cref="T:Realms.Exceptions.RealmFrozenException"/>.
            <para/>
            Note: Keeping a large number of frozen objects with different versions alive can have a negative impact on the filesize
            of the Realm. In order to avoid such a situation it is possible to set <see cref="P:Realms.RealmConfigurationBase.MaxNumberOfActiveVersions"/>.
            </summary>
            <param name="realmObj">The <see cref="T:Realms.RealmObject"/> or <see cref="T:Realms.EmbeddedObject"/> instance that you want to create a frozen version of.</param>
            <typeparam name="T">The type of the <see cref="T:Realms.RealmObject"/>/<see cref="T:Realms.EmbeddedObject"/>.</typeparam>
            <returns>A new frozen instance of the passed in object or the object itself if it was already frozen.</returns>
        </member>
        <member name="M:Realms.FrozenObjectsExtensions.Freeze``1(System.Collections.Generic.IList{``0})">
            <summary>
            Creates a frozen snapshot of this list. The frozen copy can be read and iterated over from any thread. If the list is
            not managed, a <see cref="T:Realms.Exceptions.RealmException"/> will be thrown.
            <para/>
            Freezing a list also creates a frozen Realm which has its own lifecycle, but if the live Realm that spawned the
            original list is fully closed (i.e. all instances across all threads are closed), the frozen Realm and
            list will be closed as well.
            <para/>
            Frozen lists can be read and iterated as normal, but trying to mutate it in any way or attempting to subscribe for notifications will
            throw a <see cref="T:Realms.Exceptions.RealmFrozenException"/>.
            <para/>
            Note: Keeping a large number of frozen objects with different versions alive can have a negative impact on the filesize
            of the Realm. In order to avoid such a situation it is possible to set <see cref="P:Realms.RealmConfigurationBase.MaxNumberOfActiveVersions"/>.
            </summary>
            <param name="list">The list you want to create a frozen copy of.</param>
            <typeparam name="T">Type of the objects in the list.</typeparam>
            <returns>A frozen copy of this list.</returns>
        </member>
        <member name="M:Realms.FrozenObjectsExtensions.Freeze``1(System.Linq.IQueryable{``0})">
            <summary>
            Creates a frozen snapshot of this query. The frozen copy can be read and queried from any thread. If the query is
            not managed (i.e. not a result of <see cref="M:Realms.Realm.All``1"/> invocation), a <see cref="T:Realms.Exceptions.RealmException"/> will be thrown.
            <para/>
            Freezing a query also creates a frozen Realm which has its own lifecycle, but if the live Realm that spawned the
            original query is fully closed (i.e. all instances across all threads are closed), the frozen Realm and
            query will be closed as well.
            <para/>
            Frozen queries can be read and iterated as normal, but trying to mutate it in any way or attempting to subscribe for notifications will
            throw a <see cref="T:Realms.Exceptions.RealmFrozenException"/>.
            <para/>
            Note: Keeping a large number of frozen objects with different versions alive can have a negative impact on the filesize
            of the Realm. In order to avoid such a situation it is possible to set <see cref="P:Realms.RealmConfigurationBase.MaxNumberOfActiveVersions"/>.
            </summary>
            <param name="query">The query you want to create a frozen copy of.</param>
            <typeparam name="T">The type of the <see cref="T:Realms.RealmObject"/>/<see cref="T:Realms.EmbeddedObject"/> in the query.</typeparam>
            <returns>A frozen copy of this query.</returns>
        </member>
        <member name="M:Realms.FrozenObjectsExtensions.Freeze``1(System.Collections.Generic.ISet{``0})">
            <summary>
            Creates a frozen snapshot of this set. The frozen copy can be read from any thread. If the set is
            not managed, a <see cref="T:Realms.Exceptions.RealmException"/> will be thrown.
            <para/>
            Freezing a set also creates a frozen Realm which has its own lifecycle, but if the live Realm that spawned the
            original set is fully closed (i.e. all instances across all threads are closed), the frozen Realm and
            set will be closed as well.
            <para/>
            Frozen sets can be read and iterated as normal, but trying to mutate it in any way or attempting to subscribe for notifications will
            throw a <see cref="T:Realms.Exceptions.RealmFrozenException"/>.
            <para/>
            Note: Keeping a large number of frozen objects with different versions alive can have a negative impact on the filesize
            of the Realm. In order to avoid such a situation it is possible to set <see cref="P:Realms.RealmConfigurationBase.MaxNumberOfActiveVersions"/>.
            </summary>
            <param name="set">The set you want to create a frozen copy of.</param>
            <typeparam name="T">The type of the <see cref="T:Realms.RealmObject"/>/<see cref="T:Realms.EmbeddedObject"/> in the set.</typeparam>
            <returns>A frozen copy of this set.</returns>
        </member>
        <member name="T:Realms.StringExtensions">
            <summary>
            A set of extensions methods over strings, useable in LINQ queries.
            </summary>
        </member>
        <member name="M:Realms.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether a specified substring occurs within this string.
            </summary>
            <param name="str">The original string.</param>
            <param name="value">The string to seek.</param>
            <param name="comparisonType">One of the enumeration values that determines how this string and value are compared.</param>
            <returns><c>true</c> if the value parameter occurs within this string, or if value is the empty string (""); otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>str</c> or <c>value</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>comparisonType</c> is not a valid <see cref="T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:Realms.StringExtensions.Like(System.String,System.String,System.Boolean)">
            <summary>
            Performs a 'like' comparison between the specified string and pattern.
            </summary>
            <remarks>
            <c>?</c> and <c>*</c> are allowed where <c>?</c> matches a single character and <c>*</c> matches zero or
            more characters, such that <c>?bc*</c> matches <c>abcde</c> and <c>bbc</c>, but does not match <c>bcd</c>.
            <para/>
            This extension method can be used in LINQ queries against the <see cref="T:System.Linq.IQueryable"/> returned from
            <see cref="M:Realms.Realm.All``1"/>. If used outside of a query context, it will use a <see cref="T:System.Text.RegularExpressions.Regex"/> to perform
            the comparison using the same rules.
            </remarks>
            <param name="str">The string to compare against the pattern.</param>
            <param name="pattern">The pattern to compare against.</param>
            <param name="caseSensitive">If set to <c>true</c> performs a case sensitive comparison.</param>
            <returns><c>true</c>  if the string matches the pattern, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Realms.IThreadConfinedHandle">
            <summary>
            A comon interface, implemented by all handles for thread confined objects.
            </summary>
        </member>
        <member name="M:Realms.IThreadConfinedHandle.GetThreadSafeReference">
            <summary>
            Creates a handle for the thread safe version of that object.
            </summary>
            <returns>A thread safe handle which can then be used to obtain a thread confined version of the object.</returns>
        </member>
        <member name="M:Realms.QueryHandle.StringContains(Realms.SharedRealmHandle,System.IntPtr,Realms.RealmValue@,System.Boolean)">
            <summary>
            If the user hasn't specified it, should be caseSensitive=true.
            </summary>
        </member>
        <member name="M:Realms.QueryHandle.StringStartsWith(Realms.SharedRealmHandle,System.IntPtr,Realms.RealmValue@,System.Boolean)">
            <summary>
            If the user hasn't specified it, should be <c>caseSensitive = true</c>.
            </summary>
        </member>
        <member name="M:Realms.QueryHandle.StringEndsWith(Realms.SharedRealmHandle,System.IntPtr,Realms.RealmValue@,System.Boolean)">
            <summary>
            If the user hasn't specified it, should be <c>caseSensitive = true</c>.
            </summary>
        </member>
        <member name="M:Realms.QueryHandle.StringEqual(Realms.SharedRealmHandle,System.IntPtr,Realms.RealmValue@,System.Boolean)">
            <summary>
            If the user hasn't specified it, should be <c>caseSensitive = true</c>.
            </summary>
        </member>
        <member name="M:Realms.QueryHandle.StringNotEqual(Realms.SharedRealmHandle,System.IntPtr,Realms.RealmValue@,System.Boolean)">
            <summary>
            If the user hasn't specified it, should be <c>caseSensitive = true</c>.
            </summary>
        </member>
        <member name="M:Realms.RealmHandle.Unbind">
            <summary>
            Override Unbind and put in code that actually calls core and unbinds whatever this handle is about.
            when this is called, it has already been verified that it is safe to call core - so just put in code that does the job.
            </summary>
        </member>
        <member name="M:Realms.RealmHandle.RequestUnbind(Realms.RealmHandle)">
            <summary>
            Called by children to this root, when they would like to
            be unbound, but are (possibly) running in a finalizer thread
            so it is (possibly) not safe to unbind then directly.
            </summary>
            <param name="handleToUnbind">The core handle that is not needed anymore and should be unbound.</param>
        </member>
        <member name="T:Realms.Helpers.Operator">
            <summary>
            A class that exposes a set of methods that we know are defined on a generic argument
            but there's no way to express them via the C# generic constraint system. It is generated
            by T4 transforming Operator.tt.
            </summary>
        </member>
        <member name="M:Realms.Helpers.Operator.Convert``2(``0)">
            <summary>
            Efficiently convert a <typeparamref name="TFrom"/> value to <typeparamref name="TResult"/>.
            It is intended to be used when we want to convert to or from a generic where we don't
            know the exact type, but we know that a conversion exists.
            </summary>
            <remarks>
            In synthetic benchmarks it performs about
            two orders of magnitude faster than Convert.ChangeType. It is about 4 times slower than a direct cast
            when the types are known, but about an order of magnitude faster than a cast that involves boxing to
            object.
            <br/>
            It makes use of implicit and explicit conversion operators defined on types to convert between
            numeric types, which means that we can use it both for downcasting and upcasting numeric types.
            </remarks>
            <typeparam name="TFrom">The type from which to convert.</typeparam>
            <typeparam name="TResult">The type to which <paramref name="value"/> will be converted.</typeparam>
            <param name="value">The value to convert to <typeparamref name="TResult"/>.</param>
            <returns>The value of <paramref name="value"/> represented as <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="T:Realms.Helpers.Operator.GenericOperator`2">
            <summary>
            An operator that exposes a method to convert from <typeparamref name="TSource"/>
            to <typeparamref name="TTarget"/>. Upon constructing the closed generic type, the static
            constructor will instantiate a <see cref="T:Realms.Helpers.Operator.ISpecializedConverter`2"/> and
            assign it to a static field for the duration of the application domain.
            </summary>
            <typeparam name="TSource">The type from which to convert.</typeparam>
            <typeparam name="TTarget">The type to which <typeparamref name="TSource"/> will be converted.</typeparam>
        </member>
        <member name="T:Realms.Helpers.Operator.IConverter">
            <summary>
            An interface representing a converter - used primarily to guarantee type safety of the
            generated <see cref="F:Realms.Helpers.Operator._valueConverters"/> dictionary.
            </summary>
        </member>
        <member name="T:Realms.Helpers.Operator.ISpecializedConverter`2">
            <summary>
            Interface representing a concrete converter from <typeparamref name="TSource"/>
            to <typeparamref name="TTarget"/>. For most types there will be exactly one concrete
            implementation, but there may be cases, such as <see cref="T:Realms.Helpers.Operator.InheritanceConverter`2"/>
            where a single converter type can handle multiple source/target types.
            </summary>
            <typeparam name="TSource">The type from which to convert.</typeparam>
            <typeparam name="TTarget">The type to which <typeparamref name="TSource"/> will be converted.</typeparam>
        </member>
        <member name="T:Realms.Helpers.Operator.ThrowingConverter`2">
            <summary>
            A converter that will throw whenever <see cref="M:Realms.Helpers.Operator.ISpecializedConverter`2.Convert(`0)"/>
            is called. This is used to handle cases where there is no conversion from <typeparamref name="TSource"/> to
            <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The type from which to convert.</typeparam>
            <typeparam name="TTarget">The type to which <typeparamref name="TSource"/> will be converted.</typeparam>
        </member>
        <member name="T:Realms.Helpers.Operator.UnaryConverter`1">
            <summary>
            A converter that converts from the type to itself. There are cases where we don't know what the source or
            the target type is, so we need to convert, just in case.
            </summary>
            <typeparam name="T">The type of both the source and the target.</typeparam>
        </member>
        <member name="T:Realms.Helpers.Operator.InheritanceConverter`2">
            <summary>
            A converter that converts from a type to its base type. This is typically needed
            when we want to cast from a RealmObject inheritor to RealmObjectBase or when we
            get passed <see cref="T:System.Object"/>.
            </summary>
            <typeparam name="TSource">The type from which to convert.</typeparam>
            <typeparam name="TTarget">The type to which <typeparamref name="TSource"/> will be converted.</typeparam>
        </member>
        <member name="T:Realms.NotificationsHelper.INotifiable">
            <summary>
            INotifiable represents a reactive object (e.g. RealmObjectBase/Collection).
            </summary>
        </member>
        <member name="M:Realms.NotificationsHelper.INotifiable.NotifyCallbacks(System.Nullable{Realms.NotifiableObjectHandleBase.CollectionChangeSet},System.Nullable{Realms.NativeException})">
            <summary>
            Method called when there are changes to report for that object.
            </summary>
            <param name="changes">The changes that occurred.</param>
            <param name="exception">An exception if one occurred.</param>
        </member>
        <member name="F:Realms.InteropConfig.DLL_NAME">
            <summary>
            Name of the DLL used in native declarations, constant varying per-platform.
            </summary>
        </member>
        <member name="T:Realms.ChangeSet">
            <summary>
            A <see cref="T:Realms.ChangeSet" /> describes the changes inside a <see cref="T:Realms.IRealmCollection`1" /> since the last time the notification callback was invoked.
            </summary>
        </member>
        <member name="P:Realms.ChangeSet.InsertedIndices">
            <summary>
            Gets the indices in the new version of the <see cref="T:Realms.IRealmCollection`1" /> which were newly inserted.
            </summary>
            <value>An array, containing the indices of the inserted objects.</value>
        </member>
        <member name="P:Realms.ChangeSet.ModifiedIndices">
            <summary>
            Gets the indices in the *old* version of the <see cref="T:Realms.IRealmCollection`1"/> which were modified.
            This means that either the property of an object at that index was modified or the property of
            of an object it's related to has changed.
            </summary>
            <value>An array, containing the indices of the modified objects.</value>
        </member>
        <member name="P:Realms.ChangeSet.NewModifiedIndices">
            <summary>
            Gets the indices in the *new* version of the <see cref="T:Realms.IRealmCollection`1"/> which were modified.
            Conceptually, it contains the same entries as <see cref="P:Realms.ChangeSet.ModifiedIndices"/> but after the insertions
            and deletions have been accounted for.
            </summary>
            <value>An array, containing the indices of the modified objects.</value>
        </member>
        <member name="P:Realms.ChangeSet.DeletedIndices">
            <summary>
            Gets the indices of objects in the previous version of the <see cref="T:Realms.IRealmCollection`1"/> which have been removed from this one.
            </summary>
            <value>An array, containing the indices of the deleted objects.</value>
        </member>
        <member name="P:Realms.ChangeSet.Moves">
            <summary>
            Gets the rows in the collection which moved.
            </summary>
            <remarks>
            Every <see cref="P:Realms.ChangeSet.Move.From"/> index will be present in <see cref="P:Realms.ChangeSet.DeletedIndices"/> and every <see cref="P:Realms.ChangeSet.Move.To"/>
            index will be present in <see cref="P:Realms.ChangeSet.InsertedIndices"/>.
            </remarks>
            <value>An array of <see cref="T:Realms.ChangeSet.Move"/> structs, indicating the source and the destination index of the moved row.</value>
        </member>
        <member name="T:Realms.ChangeSet.Move">
            <summary>
            A <see cref="T:Realms.ChangeSet.Move" /> contains information about objects that moved within the same <see cref="T:Realms.IRealmCollection`1"/>.
            </summary>
        </member>
        <member name="P:Realms.ChangeSet.Move.From">
            <summary>
            Gets the index in the old version of the <see cref="T:Realms.IRealmCollection`1" /> from which the object has moved.
            </summary>
            <value>The source index of the object.</value>
        </member>
        <member name="P:Realms.ChangeSet.Move.To">
            <summary>
            Gets the index in the new version of the <see cref="T:Realms.IRealmCollection`1" /> to which the object has moved.
            </summary>
            <value>The destination index of the object.</value>
        </member>
        <member name="T:Realms.NotificationCallbackDelegate`1">
            <summary>
            A callback that will be invoked each time the contents of a <see cref="T:Realms.IRealmCollection`1"/> have changed.
            </summary>
            <param name="sender">The <see cref="T:Realms.IRealmCollection`1"/> being monitored for changes.</param>
            <param name="changes">The <see cref="T:Realms.ChangeSet"/> describing the changes to a <see cref="T:Realms.IRealmCollection`1"/>,
            or <c>null</c> if an has error occurred.</param>
            <param name="error">An exception that might have occurred while asynchronously monitoring a
            <see cref="T:Realms.IRealmCollection`1"/> for changes, or <c>null</c> if no errors have occurred.</param>
            <typeparam name="T">Type of the <see cref="T:Realms.RealmObject"/>, <see cref="T:Realms.EmbeddedObject"/>, or primitive which is being returned.</typeparam>
        </member>
        <member name="T:Realms.IRealmCollection`1">
            <summary>
            Iterable, sortable collection of one kind of RealmObjectBase resulting from <see cref="M:Realms.Realm.All``1"/> or from a LINQ query expression.
            </summary>
            <typeparam name="T">Type of the <see cref="T:Realms.RealmObject"/>, <see cref="T:Realms.EmbeddedObject"/>, or primitive which is being returned.</typeparam>
        </member>
        <member name="M:Realms.IRealmCollection`1.IndexOf(System.Object)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first
            occurrence within the entire <see cref="T:Realms.IRealmCollection`1"/>.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:Realms.IRealmCollection`1"/>.
            </param>
            <returns>
            The zero-based index of the first occurrence of item within the entire <see cref="T:Realms.IRealmCollection`1"/>,
            if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Realms.IRealmCollection`1.Contains(System.Object)">
            <summary>
            Determines whether an element is in the <see cref="T:Realms.IRealmCollection`1"/>.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:Realms.IRealmCollection`1"/>.
            </param>
            <returns>true if item is found in the <see cref="T:Realms.IRealmCollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="P:Realms.IRealmCollection`1.IsValid">
            <summary>
            Gets a value indicating whether this collection is still valid to use, i.e. the <see cref="P:Realms.IRealmCollection`1.Realm"/> instance
            hasn't been closed and, if it represents a to-many relationship, it's parent object hasn't been deleted.
            </summary>
            <value><c>true</c> if the collection is valid to use; <c>false</c> otherwise.</value>
        </member>
        <member name="P:Realms.IRealmCollection`1.Realm">
            <summary>
            Gets the <see cref="P:Realms.IRealmCollection`1.Realm"/> instance this collection belongs to.
            </summary>
            <value>The <see cref="P:Realms.IRealmCollection`1.Realm"/> instance this collection belongs to.</value>
        </member>
        <member name="P:Realms.IRealmCollection`1.ObjectSchema">
            <summary>
            Gets the <see cref="T:Realms.Schema.ObjectSchema"/>, describing the persisted properties of the
            <see cref="T:Realms.RealmObject"/>s or <see cref="T:Realms.EmbeddedObject"/>s contained in the collection. If the collection contains
            primitive values, <c>ObjectSchema</c> will be <c>null</c>.
            </summary>
            <value>The ObjectSchema of the object or contained objects.</value>
        </member>
        <member name="P:Realms.IRealmCollection`1.IsFrozen">
            <summary>
            Gets a value indicating whether this collection is frozen. Frozen collections are immutable and can be accessed
            from any thread. The objects read from a frozen collection will also be frozen.
            </summary>
        </member>
        <member name="M:Realms.IRealmCollection`1.Freeze">
            <summary>
            Creates a frozen snapshot of this collection. The frozen copy can be read and queried from any thread.
            <para/>
            Freezing a collection also creates a frozen Realm which has its own lifecycle, but if the live Realm that spawned the
            original collection is fully closed (i.e. all instances across all threads are closed), the frozen Realm and
            collection will be closed as well.
            <para/>
            Frozen collections can be queried as normal, but trying to mutate it in any way or attempting to register a listener will
            throw a <see cref="T:Realms.Exceptions.RealmFrozenException"/>.
            <para/>
            Note: Keeping a large number of frozen objects with different versions alive can have a negative impact on the filesize
            of the Realm. In order to avoid such a situation it is possible to set <see cref="P:Realms.RealmConfigurationBase.MaxNumberOfActiveVersions"/>.
            </summary>
            <returns>A frozen copy of this collection.</returns>
            <seealso cref="M:Realms.FrozenObjectsExtensions.Freeze``1(System.Collections.Generic.IList{``0})"/>
            <seealso cref="M:Realms.FrozenObjectsExtensions.Freeze``1(System.Linq.IQueryable{``0})"/>
        </member>
        <member name="M:Realms.IRealmCollection`1.SubscribeForNotifications(Realms.NotificationCallbackDelegate{`0})">
            <summary>
            Register a callback to be invoked each time this <see cref="T:Realms.IRealmCollection`1"/> changes.
            </summary>
            <remarks>
            <para>
            The callback will be asynchronously invoked with the initial <see cref="T:Realms.IRealmCollection`1" />, and then
            called again after each write transaction which changes either any of the objects in the collection, or
            which objects are in the collection. The <c>changes</c> parameter will
            be <c>null</c> the first time the callback is invoked with the initial results. For each call after that,
            it will contain information about which rows in the results were added, removed or modified.
            </para>
            <para>
            If a write transaction did not modify any objects in this <see cref="T:Realms.IRealmCollection`1" />, the callback is not invoked at all.
            If an error occurs the callback will be invoked with <c>null</c> for the <c>sender</c> parameter and a non-<c>null</c> <c>error</c>.
            Currently the only errors that can occur are when opening the <see cref="T:Realms.Realm" /> on the background worker thread.
            </para>
            <para>
            At the time when the block is called, the <see cref="T:Realms.IRealmCollection`1" /> object will be fully evaluated
            and up-to-date, and as long as you do not perform a write transaction on the same thread
            or explicitly call <see cref="M:Realms.Realm.Refresh" />, accessing it will never perform blocking work.
            </para>
            <para>
            Notifications are delivered via the standard event loop, and so can't be delivered while the event loop is blocked by other activity.
            When notifications can't be delivered instantly, multiple notifications may be coalesced into a single notification.
            This can include the notification with the initial collection.
            </para>
            </remarks>
            <param name="callback">The callback to be invoked with the updated <see cref="T:Realms.IRealmCollection`1" />.</param>
            <returns>
            A subscription token. It must be kept alive for as long as you want to receive change notifications.
            To stop receiving notifications, call <see cref="M:System.IDisposable.Dispose" />.
            </returns>
            <seealso cref="M:Realms.CollectionExtensions.SubscribeForNotifications``1(System.Collections.Generic.IList{``0},Realms.NotificationCallbackDelegate{``0})"/>
            <seealso cref="M:Realms.CollectionExtensions.SubscribeForNotifications``1(System.Linq.IQueryable{``0},Realms.NotificationCallbackDelegate{``0})"/>
        </member>
        <member name="T:Realms.IQueryableCollection">
            <summary>
            IQueryableCollection exposes a method to create QueryHandle without forcing the caller to infer the type of the objects contained in the results.
            </summary>
        </member>
        <member name="M:Realms.IQueryableCollection.GetQuery">
            <summary>
            Creates a query handle for the results.
            </summary>
            <returns>The query handle.</returns>
        </member>
        <member name="M:Realms.IQueryableCollection.GetSortDescriptor">
            <summary>
            Creates a sort descriptor handle for the results.
            </summary>
            <returns>The sort descriptor handle.</returns>
        </member>
        <member name="T:Realms.Migration">
            <summary>
            This class is given to you when you migrate your database from one version to another.
            It contains two properties: <see cref="P:Realms.Migration.OldRealm"/> and <see cref="P:Realms.Migration.NewRealm"/>.
            The <see cref="P:Realms.Migration.NewRealm"/> is the one you should make sure is up to date. It will contain
            models corresponding to the configuration you've supplied.
            You can read from the <see cref="P:Realms.Migration.OldRealm"/> and access properties that have been removed from
            the classes by using the dynamic API.
            </summary>
            <seealso href="https://realm.io/docs/xamarin/latest/#migrations">See more in the migrations section in the documentation.</seealso>
        </member>
        <member name="P:Realms.Migration.OldRealm">
            <summary>
            Gets the <see cref="T:Realms.Realm"/> as it was before migrating. Use the dynamic API to access it.
            </summary>
            <value>The <see cref="T:Realms.Realm"/> before the migration.</value>
        </member>
        <member name="P:Realms.Migration.NewRealm">
            <summary>
            Gets the <see cref="T:Realms.Realm"/> that you should modify and make sure is up to date.
            </summary>
            <value>The <see cref="T:Realms.Realm"/> that will be saved after the migration.</value>
        </member>
        <member name="T:Realms.Native.MonoPInvokeCallbackAttribute">
            <summary>
            Our own copy of MonoPInvokeCallbackAttribute to avoid the Xamarin.iOS dependency.
            </summary>
        </member>
        <member name="T:Realms.Realm">
            <summary>
            A Realm instance (also referred to as a Realm) represents a Realm database.
            </summary>
            <remarks>
            <b>Warning</b>: Non-frozen Realm instances are not thread safe and can not be shared across threads.
            You must call <see cref="M:Realms.Realm.GetInstance(Realms.RealmConfigurationBase)"/> on each thread in which you want to interact with the Realm.
            </remarks>
        </member>
        <member name="M:Realms.Realm.GetInstance(System.String)">
            <summary>
            Factory for obtaining a <see cref="T:Realms.Realm"/> instance for this thread.
            </summary>
            <param name="databasePath">
            Path to the realm, must be a valid full path for the current platform, relative subdirectory, or just filename.
            </param>
            <remarks>
            If you specify a relative path, sandboxing by the OS may cause failure if you specify anything other than a subdirectory.
            </remarks>
            <returns>A <see cref="T:Realms.Realm"/> instance.</returns>
            <exception cref="T:Realms.Exceptions.RealmFileAccessErrorException">
            Thrown if the file system returns an error preventing file creation.
            </exception>
        </member>
        <member name="M:Realms.Realm.GetInstance(Realms.RealmConfigurationBase)">
            <summary>
            Factory for obtaining a <see cref="T:Realms.Realm"/> instance for this thread.
            </summary>
            <param name="config">Optional configuration.</param>
            <returns>A <see cref="T:Realms.Realm"/> instance.</returns>
            <exception cref="T:Realms.Exceptions.RealmFileAccessErrorException">
            Thrown if the file system returns an error preventing file creation.
            </exception>
        </member>
        <member name="M:Realms.Realm.GetInstanceAsync(Realms.RealmConfigurationBase,System.Threading.CancellationToken)">
            <summary>
            Factory for asynchronously obtaining a <see cref="T:Realms.Realm"/> instance.
            </summary>
            <remarks>
            If the configuration is <see cref="T:Realms.Sync.SyncConfiguration"/>, the realm will be downloaded and fully
            synchronized with the server prior to the completion of the returned Task object.
            Otherwise this method will perform any migrations on a background thread before returning an
            opened instance to the calling thread.
            </remarks>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> that is completed once the remote realm is fully synchronized or
            after migrations are executed if it's a local realm.
            </returns>
            <param name="config">A configuration object that describes the realm.</param>
            <param name="cancellationToken">An optional cancellation token that can be used to cancel the work.</param>
        </member>
        <member name="M:Realms.Realm.Compact(Realms.RealmConfigurationBase)">
            <summary>
            Compacts a Realm file. A Realm file usually contains free/unused space. This method removes this free space and the file size is thereby reduced. Objects within the Realm file are untouched.
            </summary>
            <remarks>
            The realm file must not be open on other threads.
            The file system should have free space for at least a copy of the Realm file.
            This method must not be called inside a transaction.
            The Realm file is left untouched if any file operation fails.
            </remarks>
            <param name="config">Optional configuration.</param>
            <returns><c>true</c> if successful, <c>false</c> if any file operation failed.</returns>
        </member>
        <member name="M:Realms.Realm.DeleteRealm(Realms.RealmConfigurationBase)">
            <summary>
            Deletes all the files associated with a realm.
            </summary>
            <param name="configuration">A <see cref="T:Realms.RealmConfigurationBase"/> which supplies the realm path.</param>
        </member>
        <member name="P:Realms.Realm.DynamicApi">
            <summary>
            Gets an object encompassing the dynamic API for this Realm instance.
            </summary>
        </member>
        <member name="P:Realms.Realm.IsInTransaction">
            <summary>
            Gets a value indicating whether there is an active <see cref="T:Realms.Transaction"/> is in transaction.
            </summary>
            <value><c>true</c> if is in transaction; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Realms.Realm.IsFrozen">
            <summary>
            Gets a value indicating whether this Realm is frozen. Frozen Realms are immutable
            and will not update when writes are made to the database. Unlike live Realms, frozen
            Realms can be used across threads.
            </summary>
            <see cref="M:Realms.Realm.Freeze"/>
        </member>
        <member name="P:Realms.Realm.Schema">
            <summary>
            Gets the <see cref="T:Realms.Schema.RealmSchema"/> instance that describes all the types that can be stored in this <see cref="T:Realms.Realm"/>.
            </summary>
            <value>The Schema of the Realm.</value>
        </member>
        <member name="P:Realms.Realm.Config">
            <summary>
            Gets the <see cref="T:Realms.RealmConfigurationBase"/> that controls this realm's path and other settings.
            </summary>
            <value>The Realm's configuration.</value>
        </member>
        <member name="T:Realms.Realm.RealmChangedEventHandler">
            <summary>
            Handler type used by <see cref="E:Realms.Realm.RealmChanged"/>.
            </summary>
            <param name="sender">The <see cref="T:Realms.Realm"/> which has changed.</param>
            <param name="e">Currently an empty argument, in future may indicate more details about the change.</param>
        </member>
        <member name="E:Realms.Realm.RealmChanged">
            <summary>
            Triggered when a Realm has changed (i.e. a <see cref="T:Realms.Transaction"/> was committed).
            </summary>
        </member>
        <member name="E:Realms.Realm.Error">
            <summary>
            Triggered when a Realm-level exception has occurred.
            </summary>
        </member>
        <member name="P:Realms.Realm.IsClosed">
            <summary>
            Gets a value indicating whether the instance has been closed via <see cref="M:Realms.Realm.Dispose"/>. If <c>true</c>, you
            should not call methods on that instance.
            </summary>
            <value><c>true</c> if closed, <c>false</c> otherwise.</value>
        </member>
        <member name="M:Realms.Realm.Dispose">
            <summary>
            Disposes the current instance and closes the native Realm if this is the last remaining
            instance holding a reference to it.
            </summary>
        </member>
        <member name="M:Realms.Realm.Freeze">
            <summary>
            Returns a frozen (immutable) snapshot of this Realm.
            <para/>
            A frozen Realm is an immutable snapshot view of a particular version of a
            Realm's data. Unlike normal <see cref="T:Realms.Realm"/> instances, it does not live-update to
            reflect writes made to the Realm, and can be accessed from any thread. Writing
            to a frozen Realm is not allowed, and attempting to begin a write transaction
            will throw an exception.
            <para/>
            All objects and collections read from a frozen Realm will also be frozen.
            <para/>
            Note: Keeping a large number of frozen Realms with different versions alive can have a negative impact on the filesize
            of the underlying database. In order to avoid such a situation it is possible to set <see cref="P:Realms.RealmConfigurationBase.MaxNumberOfActiveVersions"/>.
            </summary>
            <returns>A frozen <see cref="T:Realms.Realm"/> instance.</returns>
        </member>
        <member name="M:Realms.Realm.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Realms.Realm.IsSameInstance(Realms.Realm)">
            <summary>
            Determines whether this instance is the same core instance as the passed in argument.
            </summary>
            <remarks>
            You can, and should, have multiple instances open on different threads which have the same path and open the same Realm.
            </remarks>
            <returns><c>true</c> if this instance is the same core instance; otherwise, <c>false</c>.</returns>
            <param name="other">The Realm to compare with the current Realm.</param>
        </member>
        <member name="M:Realms.Realm.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Realms.Realm.Add``1(``0,System.Boolean)">
            <summary>
            This <see cref="T:Realms.Realm"/> will start managing a <see cref="T:Realms.RealmObject"/> which has been created as a standalone object.
            </summary>
            <typeparam name="T">
            The Type T must not only be a <see cref="T:Realms.RealmObject"/> but also have been processed by the Fody weaver,
            so it has persistent properties.
            </typeparam>
            <param name="obj">Must be a standalone object, <c>null</c> not allowed.</param>
            <param name="update">If <c>true</c>, and an object with the same primary key already exists, performs an update.</param>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:Realms.Exceptions.RealmObjectManagedByAnotherRealmException">
            You can't manage an object with more than one <see cref="T:Realms.Realm"/>.
            </exception>
            <remarks>
            If the object is already managed by this <see cref="T:Realms.Realm"/>, this method does nothing.
            This method modifies the object in-place, meaning that after it has run, <c>obj</c> will be managed.
            Returning it is just meant as a convenience to enable fluent syntax scenarios.
            </remarks>
            <returns>The passed object, so that you can write <c>var person = realm.Add(new Person { Id = 1 });</c>.</returns>
        </member>
        <member name="M:Realms.Realm.Add``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Add a collection of standalone <see cref="T:Realms.RealmObject"/>s to this <see cref="T:Realms.Realm"/>.
            </summary>
            <typeparam name="T">
            The Type T must not only be a <see cref="T:Realms.RealmObject"/> but also have been processed by the Fody weaver,
            so it has persistent properties.
            </typeparam>
            <param name="objs">A collection of <see cref="T:Realms.RealmObject"/> instances that will be added to this <see cref="T:Realms.Realm"/>.</param>
            <param name="update">If <c>true</c>, and an object with the same primary key already exists, performs an update.</param>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:Realms.Exceptions.RealmObjectManagedByAnotherRealmException">
            You can't manage an object with more than one <see cref="T:Realms.Realm"/>.
            </exception>
            <remarks>
            If the collection contains items that are already managed by this <see cref="T:Realms.Realm"/>, they will be ignored.
            This method modifies the objects in-place, meaning that after it has run, all items in <c>objs</c> will be managed.
            </remarks>
        </member>
        <member name="M:Realms.Realm.Add(Realms.RealmObject,System.Boolean)">
            <summary>
            This <see cref="T:Realms.Realm"/> will start managing a <see cref="T:Realms.RealmObject"/> which has been created as a standalone object.
            </summary>
            <param name="obj">Must be a standalone object, <c>null</c> not allowed.</param>
            <param name="update">If <c>true</c>, and an object with the same primary key already exists, performs an update.</param>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:Realms.Exceptions.RealmObjectManagedByAnotherRealmException">
            You can't manage an object with more than one <see cref="T:Realms.Realm"/>.
            </exception>
            <remarks>
            If the object is already managed by this <see cref="T:Realms.Realm"/>, this method does nothing.
            This method modifies the object in-place, meaning that after it has run, <c>obj</c> will be managed.
            Cyclic graphs (<c>Parent</c> has <c>Child</c> that has a <c>Parent</c>) will result in undefined behavior.
            You have to break the cycle manually and assign relationships after all object have been managed.
            </remarks>
            <returns>The passed object.</returns>
        </member>
        <member name="M:Realms.Realm.BeginWrite">
            <summary>
            Factory for a write <see cref="T:Realms.Transaction"/>. Essential object to create scope for updates.
            </summary>
            <example>
            <code>
            using (var trans = realm.BeginWrite())
            {
                realm.Add(new Dog
                {
                    Name = "Rex"
                });
                trans.Commit();
            }
            </code>
            </example>
            <returns>A transaction in write mode, which is required for any creation or modification of objects persisted in a <see cref="T:Realms.Realm"/>.</returns>
        </member>
        <member name="M:Realms.Realm.Write(System.Action)">
            <summary>
            Execute an action inside a temporary <see cref="T:Realms.Transaction"/>. If no exception is thrown, the <see cref="T:Realms.Transaction"/>
            will be committed.
            </summary>
            <remarks>
            Creates its own temporary <see cref="T:Realms.Transaction"/> and commits it after running the lambda passed to <paramref name="action"/>.
            Be careful of wrapping multiple single property updates in multiple <see cref="M:Realms.Realm.Write(System.Action)"/> calls.
            It is more efficient to update several properties or even create multiple objects in a single <see cref="M:Realms.Realm.Write(System.Action)"/>,
            unless you need to guarantee finer-grained updates.
            </remarks>
            <example>
            <code>
            realm.Write(() =>
            {
                realm.Add(new Dog
                {
                    Name = "Eddie",
                    Age = 5
                });
            });
            </code>
            </example>
            <param name="action">
            Action to execute inside a <see cref="T:Realms.Transaction"/>, creating, updating, or removing objects.
            </param>
        </member>
        <member name="M:Realms.Realm.Write``1(System.Func{``0})">
            <summary>
            Execute a delegate inside a temporary <see cref="T:Realms.Transaction"/>. If no exception is thrown, the <see cref="T:Realms.Transaction"/>
            will be committed.
            </summary>
            <remarks>
            Creates its own temporary <see cref="T:Realms.Transaction"/> and commits it after running the lambda passed to <paramref name="function"/>.
            Be careful of wrapping multiple single property updates in multiple <see cref="M:Realms.Realm.Write(System.Action)"/> calls.
            It is more efficient to update several properties or even create multiple objects in a single <see cref="M:Realms.Realm.Write(System.Action)"/>,
            unless you need to guarantee finer-grained updates.
            </remarks>
            <example>
            <code>
            var dog = realm.Write(() =>
            {
                return realm.Add(new Dog
                {
                    Name = "Eddie",
                    Age = 5
                });
            });
            </code>
            </example>
            <param name="function">
            Delegate with one return value to execute inside a <see cref="T:Realms.Transaction"/>, creating, updating, or removing objects.
            </param>
            <typeparam name="T">The type returned by the input delegate.</typeparam>
            <returns>The return value of <paramref name="function"/>.</returns>
        </member>
        <member name="M:Realms.Realm.WriteAsync(System.Action{Realms.Realm})">
            <summary>
            Execute an action inside a temporary <see cref="T:Realms.Transaction"/> on a worker thread, <b>if</b> called from UI thread. If no exception is thrown,
            the <see cref="T:Realms.Transaction"/> will be committed.
            </summary>
            <remarks>
            Opens a new instance of this Realm on a worker thread and executes <paramref name="action"/> inside a write <see cref="T:Realms.Transaction"/>.
            <see cref="T:Realms.Realm"/>s and <see cref="T:Realms.RealmObject"/>s/<see cref="T:Realms.EmbeddedObject"/>s are thread-affine, so capturing any such objects in
            the <c>action</c> delegate will lead to errors if they're used on the worker thread. Note that it checks the
            <see cref="T:System.Threading.SynchronizationContext"/> to determine if <c>Current</c> is null, as a test to see if you are on the UI thread
            and will otherwise just call Write without starting a new thread. So if you know you are invoking from a worker thread, just call Write instead.
            </remarks>
            <example>
            <code>
            await realm.WriteAsync(tempRealm =&gt;
            {
                var pongo = tempRealm.All&lt;Dog&gt;().Single(d =&gt; d.Name == "Pongo");
                var missis = tempRealm.All&lt;Dog&gt;().Single(d =&gt; d.Name == "Missis");
                for (var i = 0; i &lt; 15; i++)
                {
                    tempRealm.Add(new Dog
                    {
                        Breed = "Dalmatian",
                        Mum = missis,
                        Dad = pongo
                    });
                }
            });
            </code>
            <b>Note</b> that inside the action, we use <c>tempRealm</c>.
            </example>
            <param name="action">
            Action to execute inside a <see cref="T:Realms.Transaction"/>, creating, updating, or removing objects.
            </param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Realms.Realm.WriteAsync``1(System.Func{Realms.Realm,``0})">
            <summary>
            Execute a delegate inside a temporary <see cref="T:Realms.Transaction"/> on a worker thread, <b>if</b> called from UI thread. If no exception is thrown,
            the <see cref="T:Realms.Transaction"/> will be committed.
            </summary>
            <remarks>
            Opens a new instance of this Realm on a worker thread and executes <paramref name="function"/> inside a write <see cref="T:Realms.Transaction"/>.
            <see cref="T:Realms.Realm"/>s and <see cref="T:Realms.RealmObject"/>s/<see cref="T:Realms.EmbeddedObject"/>s are thread-affine, so capturing any such objects in
            the <c>action</c> delegate will lead to errors if they're used on the worker thread. Note that it checks the
            <see cref="T:System.Threading.SynchronizationContext"/> to determine if <c>Current</c> is null, as a test to see if you are on the UI thread
            and will otherwise just call Write without starting a new thread. So if you know you are invoking from a worker thread, just call Write instead.
            </remarks>
            <example>
            <code>
            var dog = await realm.WriteAsync(tempRealm =&gt;
            {
                return tempRealm.Add(new Dog
                {
                    Breed = "Dalmatian",
                });
            });
            </code>
            <b>Note</b> that inside the action, we use <c>tempRealm</c>.
            </example>
            <param name="function">
            Delegate with one return value to execute inside a <see cref="T:Realms.Transaction"/>, creating, updating, or removing objects.
            </param>
            <typeparam name="T">The type returned by the input delegate.</typeparam>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> with return type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Realms.Realm.WriteAsync``1(System.Func{Realms.Realm,System.Linq.IQueryable{``0}})">
             <summary>
             Execute a delegate inside a temporary <see cref="T:Realms.Transaction"/> on a worker thread, <b>if</b> called from UI thread. If no exception is thrown,
             the <see cref="T:Realms.Transaction"/> will be committed.
             </summary>
             <remarks>
             Opens a new instance of this Realm on a worker thread and executes <paramref name="function"/> inside a write <see cref="T:Realms.Transaction"/>.
             <see cref="T:Realms.Realm"/>s and <see cref="T:Realms.RealmObject"/>s/<see cref="T:Realms.EmbeddedObject"/>s are thread-affine, so capturing any such objects in
             the <c>action</c> delegate will lead to errors if they're used on the worker thread. Note that it checks the
             <see cref="T:System.Threading.SynchronizationContext"/> to determine if <c>Current</c> is null, as a test to see if you are on the UI thread
             and will otherwise just call Write without starting a new thread. So if you know you are invoking from a worker thread, just call Write instead.
             </remarks>
             <example>
             <code>
             var dogs = await realm.WriteAsync(tempRealm =&gt;
             {
                 tempRealm.Add(new Dog
                 {
                     Breed = "Dalmatian",
                 });
            
                 tempRealm.Add(new Dog
                 {
                     Breed = "Poddle",
                 });
            
                 return tempRealm.All&lt;Dog&gt;();
             });
             </code>
             <b>Note</b> that inside the action, we use <c>tempRealm</c>.
             </example>
             <param name="function">
             Delegate with return type <see cref="T:System.Linq.IQueryable`1"/> to execute inside a <see cref="T:Realms.Transaction"/>, creating, updating, or removing objects.
             </param>
             <typeparam name="T">The type of data in the <see cref="T:System.Linq.IQueryable`1"/>.</typeparam>
             <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> with return type <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:Realms.Realm.WriteAsync``1(System.Func{Realms.Realm,System.Collections.Generic.IList{``0}})">
             <summary>
             Execute a delegate inside a temporary <see cref="T:Realms.Transaction"/> on a worker thread, <b>if</b> called from UI thread. If no exception is thrown,
             the <see cref="T:Realms.Transaction"/> will be committed.
             </summary>
             <remarks>
             Opens a new instance of this Realm on a worker thread and executes <paramref name="function"/> inside a write <see cref="T:Realms.Transaction"/>.
             <see cref="T:Realms.Realm"/>s and <see cref="T:Realms.RealmObject"/>s/<see cref="T:Realms.EmbeddedObject"/>s are thread-affine, so capturing any such objects in
             the <c>action</c> delegate will lead to errors if they're used on the worker thread. Note that it checks the
             <see cref="T:System.Threading.SynchronizationContext"/> to determine if <c>Current</c> is null, as a test to see if you are on the UI thread
             and will otherwise just call Write without starting a new thread. So if you know you are invoking from a worker thread, just call Write instead.
             </remarks>
             <example>
             <code>
             var markDogs = await realm.WriteAsync(tempRealm =&gt;
             {
                 var mark = tempRealm.All&lt;Person&gt;().Single(d =&gt; d.Name == "Mark");
            
                 mark.Dogs.Add(new Dog
                 {
                     Breed = "Dalmatian",
                 });
            
                 mark.Dogs.Add(new Dog
                 {
                     Breed = "Poodle",
                 });
            
                 return mark.Dogs;
             });
             </code>
             <b>Note</b> that inside the action, we use <c>tempRealm</c>.
             </example>
             <param name="function">
             Delegate with return type <see cref="T:System.Collections.Generic.IList`1"/> to execute inside a <see cref="T:Realms.Transaction"/>, creating, updating, or removing objects.
             </param>
             <typeparam name="T">The type of data in the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
             <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> with return type <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
        </member>
        <member name="M:Realms.Realm.Refresh">
            <summary>
            Update the <see cref="T:Realms.Realm"/> instance and outstanding objects to point to the most recent persisted version.
            </summary>
            <returns>
            Whether the <see cref="T:Realms.Realm"/> had any updates. Note that this may return true even if no data has actually changed.
            </returns>
        </member>
        <member name="M:Realms.Realm.RefreshAsync">
            <summary>
            Asynchronously wait for the <see cref="T:Realms.Realm"/> instance and outstanding objects to get updated
            to point to the most recent persisted version.
            </summary>
            <remarks>
            On worker threads (where the SynchronizationContext) is null, this will call the blocking <see cref="M:Realms.Realm.Refresh"/>
            method instead. On the main thread (or other threads that have SynchronizationContext), this will wait until
            the instance automatically updates to resolve the task. Note that you must keep a reference to the Realm
            until the returned task is resolved.
            </remarks>
            <returns>
            Whether the <see cref="T:Realms.Realm"/> had any updates. Note that this may return true even if no data has actually changed.
            </returns>
        </member>
        <member name="M:Realms.Realm.All``1">
            <summary>
            Extract an iterable set of objects for direct use or further query.
            </summary>
            <typeparam name="T">The Type T must be a <see cref="T:Realms.RealmObject"/>.</typeparam>
            <returns>A queryable collection that without further filtering, allows iterating all objects of class T, in this <see cref="T:Realms.Realm"/>.</returns>
        </member>
        <member name="M:Realms.Realm.Find``1(System.Nullable{System.Int64})">
            <summary>
            Fast lookup of an object from a class which has a PrimaryKey property.
            </summary>
            <typeparam name="T">The Type T must be a <see cref="T:Realms.RealmObject"/>.</typeparam>
            <param name="primaryKey">
            Primary key to be matched exactly, same as an == search.
            An argument of type <c>long?</c> works for all integer properties, supported as PrimaryKey.
            </param>
            <returns><c>null</c> or an object matching the primary key.</returns>
            <exception cref="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            If the <see cref="T:Realms.RealmObject"/> class T lacks <see cref="T:Realms.PrimaryKeyAttribute"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.Find``1(System.String)">
            <summary>
            Fast lookup of an object from a class which has a PrimaryKey property.
            </summary>
            <typeparam name="T">The Type T must be a <see cref="T:Realms.RealmObject"/>.</typeparam>
            <param name="primaryKey">Primary key to be matched exactly, same as an == search.</param>
            <returns><c>null</c> or an object matching the primary key.</returns>
            <exception cref="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            If the <see cref="T:Realms.RealmObject"/> class T lacks <see cref="T:Realms.PrimaryKeyAttribute"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.Find``1(System.Nullable{MongoDB.Bson.ObjectId})">
            <summary>
            Fast lookup of an object from a class which has a PrimaryKey property.
            </summary>
            <typeparam name="T">The Type T must be a <see cref="T:Realms.RealmObject"/>.</typeparam>
            <param name="primaryKey">Primary key to be matched exactly, same as an == search.</param>
            <returns><c>null</c> or an object matching the primary key.</returns>
            <exception cref="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            If the <see cref="T:Realms.RealmObject"/> class T lacks <see cref="T:Realms.PrimaryKeyAttribute"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.Find``1(System.Nullable{System.Guid})">
            <summary>
            Fast lookup of an object from a class which has a PrimaryKey property.
            </summary>
            <typeparam name="T">The Type T must be a <see cref="T:Realms.RealmObject"/>.</typeparam>
            <param name="primaryKey">Primary key to be matched exactly, same as an == search.</param>
            <returns><c>null</c> or an object matching the primary key.</returns>
            <exception cref="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            If the <see cref="T:Realms.RealmObject"/> class T lacks <see cref="T:Realms.PrimaryKeyAttribute"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.Object{``0})">
            <summary>
            Returns the same object as the one referenced when the <see cref="T:Realms.ThreadSafeReference.Object`1"/> was first created,
            but resolved for the current Realm for this thread.
            </summary>
            <param name="reference">The thread-safe reference to the thread-confined <see cref="T:Realms.RealmObject"/>/<see cref="T:Realms.EmbeddedObject"/> to resolve in this <see cref="T:Realms.Realm"/>.</param>
            <typeparam name="T">The type of the object, contained in the reference.</typeparam>
            <returns>
            A thread-confined instance of the original <see cref="T:Realms.RealmObject"/>/<see cref="T:Realms.EmbeddedObject"/> resolved for the current thread or <c>null</c>
            if the object has been deleted after the reference was created.
            </returns>
        </member>
        <member name="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.List{``0})">
            <summary>
            Returns the same collection as the one referenced when the <see cref="T:Realms.ThreadSafeReference.List`1"/> was first created,
            but resolved for the current Realm for this thread.
            </summary>
            <param name="reference">The thread-safe reference to the thread-confined <see cref="T:System.Collections.Generic.IList`1"/> to resolve in this <see cref="T:Realms.Realm"/>.</param>
            <typeparam name="T">The type of the objects, contained in the collection.</typeparam>
            <returns>
            A thread-confined instance of the original <see cref="T:System.Collections.Generic.IList`1"/> resolved for the current thread or <c>null</c>
            if the list's parent object has been deleted after the reference was created.
            </returns>
        </member>
        <member name="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.Set{``0})">
            <summary>
            Returns the same collection as the one referenced when the <see cref="T:Realms.ThreadSafeReference.Set`1"/> was first created,
            but resolved for the current Realm for this thread.
            </summary>
            <param name="reference">The thread-safe reference to the thread-confined <see cref="T:System.Collections.Generic.ISet`1"/> to resolve in this <see cref="T:Realms.Realm"/>.</param>
            <typeparam name="T">The type of the objects, contained in the collection.</typeparam>
            <returns>
            A thread-confined instance of the original <see cref="T:System.Collections.Generic.ISet`1"/> resolved for the current thread or <c>null</c>
            if the set's parent object has been deleted after the reference was created.
            </returns>
        </member>
        <member name="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.Query{``0})">
            <summary>
            Returns the same query as the one referenced when the <see cref="T:Realms.ThreadSafeReference.Query`1"/> was first created,
            but resolved for the current Realm for this thread.
            </summary>
            <param name="reference">The thread-safe reference to the thread-confined <see cref="T:System.Linq.IQueryable`1"/> to resolve in this <see cref="T:Realms.Realm"/>.</param>
            <typeparam name="T">The type of the object, contained in the query.</typeparam>
            <returns>A thread-confined instance of the original <see cref="T:System.Linq.IQueryable`1"/> resolved for the current thread.</returns>
        </member>
        <member name="M:Realms.Realm.Remove(Realms.RealmObjectBase)">
            <summary>
            Removes a persistent object from this Realm, effectively deleting it.
            </summary>
            <param name="obj">Must be an object persisted in this Realm.</param>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <c>obj</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If you pass a standalone object.</exception>
        </member>
        <member name="M:Realms.Realm.RemoveRange``1(System.Linq.IQueryable{``0})">
            <summary>
            Remove objects matching a query from the Realm.
            </summary>
            <typeparam name="T">Type of the objects to remove.</typeparam>
            <param name="range">The query to match for.</param>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <c>range</c> is not the result of <see cref="M:Realms.Realm.All``1"/> or subsequent LINQ filtering.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <c>range</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Realms.Realm.RemoveAll``1">
            <summary>
            Remove all objects of a type from the Realm.
            </summary>
            <typeparam name="T">Type of the objects to remove.</typeparam>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the type T is not part of the limited set of classes in this Realm's <see cref="P:Realms.Realm.Schema"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.RemoveAll">
            <summary>
            Remove all objects of all types managed by this Realm.
            </summary>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.WriteCopy(Realms.RealmConfigurationBase)">
            <summary>
            Writes a compacted copy of the Realm to the path in the specified config. If the configuration object has
            non-null <see cref="P:Realms.RealmConfigurationBase.EncryptionKey"/>, the copy will be encrypted with that key.
            </summary>
            <remarks>
            The destination file cannot already exist.
            <para/>
            If this is called from within a transaction it writes the current data, and not the data as it was when
            the last transaction was committed.
            </remarks>
            <param name="config">Configuration, specifying the path and optionally the encryption key for the copy.</param>
        </member>
        <member name="T:Realms.Realm.Dynamic">
            <summary>
            A class that exposes the dynamic API for a <see cref="T:Realms.Realm"/> instance.
            </summary>
        </member>
        <member name="M:Realms.Realm.Dynamic.CreateObject(System.String,System.Object)">
            <summary>
            Factory for a managed object in a realm. Only valid within a write <see cref="T:Realms.Transaction"/>.
            </summary>
            <returns>A dynamically-accessed Realm object.</returns>
            <param name="className">The type of object to create as defined in the schema.</param>
            <param name="primaryKey">
            The primary key of object to be created. If the object doesn't have primary key defined, this argument
            is ignored.
            </param>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If you pass <c>null</c> for an object with string primary key.
            </exception>
            <exception cref="T:System.ArgumentException">
            If you pass <c>primaryKey</c> with type that is different from the type, defined in the schema.
            </exception>
            <remarks>
            If the realm instance has been created from an un-typed schema (such as when migrating from an older version
            of a realm) the returned object will be purely dynamic. If the realm has been created from a typed schema as
            is the default case when calling <see cref="M:Realms.Realm.GetInstance(Realms.RealmConfigurationBase)"/> the returned
            object will be an instance of a user-defined class.
            </remarks>
        </member>
        <member name="M:Realms.Realm.Dynamic.CreateEmbeddedObjectForProperty(Realms.RealmObjectBase,System.String)">
            <summary>
            Factory for a managed embedded object in a realm. Only valid within a write <see cref="T:Realms.Transaction"/>.
            Embedded objects need to be owned immediately which is why they can only be created for a specific property.
            </summary>
            <param name="parent">
            The parent <see cref="T:Realms.RealmObject"/> or <see cref="T:Realms.EmbeddedObject"/> that will own the newly created
            embedded object.
            </param>
            <param name="propertyName">The property to which the newly created embedded object will be assigned.</param>
            <returns>A dynamically-accessed embedded object.</returns>
        </member>
        <member name="M:Realms.Realm.Dynamic.AddEmbeddedObjectToList(Realms.IRealmCollection{Realms.EmbeddedObject})">
            <summary>
            Creates an embedded object and adds it to the specified list. This also assigns correct ownership of the newly created embedded object.
            </summary>
            <param name="list">The list to which the object will be added.</param>
            <returns>The newly created object, after it has been added to the back of the list.</returns>
            <remarks>
            Lists of embedded objects cannot directly add objects as that would require constructing an unowned embedded object, which is not possible. This is why
            <see cref="M:Realms.Realm.Dynamic.AddEmbeddedObjectToList(Realms.IRealmCollection{Realms.EmbeddedObject})"/>, <see cref="M:Realms.Realm.Dynamic.InsertEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)"/>, and <see cref="M:Realms.Realm.Dynamic.SetEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)"/> have to be used instead of
            <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>, <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/>, and <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>.
            </remarks>
            <seealso cref="M:Realms.Realm.Dynamic.InsertEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)"/>
            <seealso cref="M:Realms.Realm.Dynamic.SetEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)"/>
        </member>
        <member name="M:Realms.Realm.Dynamic.InsertEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)">
            <summary>
            Creates an embedded object and inserts it in the specified list at the specified index. This also assigns correct ownership of the newly created embedded object.
            </summary>
            <param name="list">The list in which the object will be inserted.</param>
            <param name="index">The index at which the object will be inserted.</param>
            <returns>The newly created object, after it has been inserted in the list.</returns>
            <remarks>
            Lists of embedded objects cannot directly add objects as that would require constructing an unowned embedded object, which is not possible. This is why
            <see cref="M:Realms.Realm.Dynamic.AddEmbeddedObjectToList(Realms.IRealmCollection{Realms.EmbeddedObject})"/>, <see cref="M:Realms.Realm.Dynamic.InsertEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)"/>, and <see cref="M:Realms.Realm.Dynamic.SetEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)"/> have to be used instead of
            <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>, <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/>, and <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>.
            </remarks>
            <seealso cref="M:Realms.Realm.Dynamic.InsertEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)"/>
            <seealso cref="M:Realms.Realm.Dynamic.SetEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)"/>
        </member>
        <member name="M:Realms.Realm.Dynamic.SetEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)">
            <summary>
            Creates an embedded object and sets it in the specified list at the specified index. This also assigns correct ownership of the newly created embedded object.
            </summary>
            <param name="list">The list in which the object will be set.</param>
            <param name="index">The index at which the object will be set.</param>
            <returns>The newly created object, after it has been set to the specified index in the list.</returns>
            <remarks>
            Lists of embedded objects cannot directly add objects as that would require constructing an unowned embedded object, which is not possible. This is why
            <see cref="M:Realms.Realm.Dynamic.AddEmbeddedObjectToList(Realms.IRealmCollection{Realms.EmbeddedObject})"/>, <see cref="M:Realms.Realm.Dynamic.InsertEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)"/>, and <see cref="M:Realms.Realm.Dynamic.SetEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)"/> have to be used instead of
            <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>, <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/>, and <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>.
            <para/>
            Setting an object at an index will remove the existing object from the list and unown it. Since unowned embedded objects are automatically deleted,
            the old object that the list contained at <paramref name="index"/> will get deleted when the transaction is committed.
            </remarks>
            <seealso cref="M:Realms.Realm.Dynamic.InsertEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)"/>
            <seealso cref="M:Realms.Realm.Dynamic.SetEmbeddedObjectInList(Realms.IRealmCollection{Realms.EmbeddedObject},System.Int32)"/>
        </member>
        <member name="M:Realms.Realm.Dynamic.All(System.String)">
            <summary>
            Get a view of all the objects of a particular type.
            </summary>
            <param name="className">The type of the objects as defined in the schema.</param>
            <remarks>Because the objects inside the view are accessed dynamically, the view cannot be queried into using LINQ or other expression predicates.</remarks>
            <returns>A queryable collection that without further filtering, allows iterating all objects of className, in this realm.</returns>
        </member>
        <member name="M:Realms.Realm.Dynamic.RemoveAll(System.String)">
            <summary>
            Remove all objects of a type from the Realm.
            </summary>
            <param name="className">Type of the objects to remove as defined in the schema.</param>
            <exception cref="T:Realms.Exceptions.RealmInvalidTransactionException">
            If you invoke this when there is no write <see cref="T:Realms.Transaction"/> active on the <see cref="T:Realms.Realm"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If you pass <c>className</c> that does not belong to this Realm's schema.
            </exception>
        </member>
        <member name="M:Realms.Realm.Dynamic.Find(System.String,System.Nullable{System.Int64})">
            <summary>
            Fast lookup of an object for dynamic use, from a class which has a PrimaryKey property.
            </summary>
            <param name="className">Name of class in dynamic situation.</param>
            <param name="primaryKey">
            Primary key to be matched exactly, same as an == search.
            An argument of type <c>long?</c> works for all integer properties, supported as PrimaryKey.
            </param>
            <returns><c>null</c> or an object matching the primary key.</returns>
            <exception cref="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            If the <see cref="T:Realms.RealmObject"/> class T lacks <see cref="T:Realms.PrimaryKeyAttribute"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.Dynamic.Find(System.String,System.String)">
            <summary>
            Fast lookup of an object for dynamic use, from a class which has a PrimaryKey property.
            </summary>
            <param name="className">Name of class in dynamic situation.</param>
            <param name="primaryKey">Primary key to be matched exactly, same as an == search.</param>
            <returns><c>null</c> or an object matching the primary key.</returns>
            <exception cref="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            If the <see cref="T:Realms.RealmObject"/> class T lacks <see cref="T:Realms.PrimaryKeyAttribute"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.Dynamic.Find(System.String,System.Nullable{MongoDB.Bson.ObjectId})">
            <summary>
            Fast lookup of an object for dynamic use, from a class which has a PrimaryKey property.
            </summary>
            <param name="className">Name of class in dynamic situation.</param>
            <param name="primaryKey">
            Primary key to be matched exactly, same as an == search.
            </param>
            <returns><c>null</c> or an object matching the primary key.</returns>
            <exception cref="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            If the <see cref="T:Realms.RealmObject"/> class T lacks <see cref="T:Realms.PrimaryKeyAttribute"/>.
            </exception>
        </member>
        <member name="M:Realms.Realm.Dynamic.Find(System.String,System.Nullable{System.Guid})">
            <summary>
            Fast lookup of an object for dynamic use, from a class which has a PrimaryKey property.
            </summary>
            <param name="className">Name of class in dynamic situation.</param>
            <param name="primaryKey">
            Primary key to be matched exactly, same as an == search.
            </param>
            <returns><c>null</c> or an object matching the primary key.</returns>
            <exception cref="T:Realms.Exceptions.RealmClassLacksPrimaryKeyException">
            If the <see cref="T:Realms.RealmObject"/> class T lacks <see cref="T:Realms.PrimaryKeyAttribute"/>.
            </exception>
        </member>
        <member name="T:Realms.Schema.ObjectSchema">
            <summary>
            Public description of a class stored in a Realm, as a collection of managed Property objects.
            </summary>
        </member>
        <member name="P:Realms.Schema.ObjectSchema.Name">
            <summary>
            Gets the name of the original class declaration from which the schema was built.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:Realms.Schema.ObjectSchema.Count">
            <summary>
            Gets the number of properties in the schema, which is the persistent properties from the original class.
            </summary>
            <value>The number of persistent properties for the object.</value>
        </member>
        <member name="M:Realms.Schema.ObjectSchema.TryFindProperty(System.String,Realms.Schema.Property@)">
            <summary>
            Looks for a <see cref="T:Realms.Schema.Property"/> by <see cref="P:Realms.Schema.Property.Name"/>.
            Failure to find means it is not regarded as a property to persist in a <see cref="T:Realms.Realm"/>.
            </summary>
            <returns><c>true</c>, if a <see cref="T:Realms.Schema.Property"/> was found matching <see cref="P:Realms.Schema.Property.Name"/>;
            <c>false</c> otherwise.</returns>
            <param name="name"><see cref="P:Realms.Schema.Property.Name"/> of the <see cref="T:Realms.Schema.Property"/> to match exactly.</param>
            <param name="property"><see cref="T:Realms.Schema.Property"/> returned only if found matching Name.</param>
        </member>
        <member name="M:Realms.Schema.ObjectSchema.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Realms.Schema.ObjectSchema.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Realms.Schema.ObjectSchema.FromType(System.Reflection.TypeInfo)">
            <summary>
            Creates a schema describing a <see cref="T:Realms.RealmObject"/> or <see cref="T:Realms.EmbeddedObject"/> subclass in terms of its persisted members.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown if no class Type is provided or if it doesn't descend directly from <see cref="T:Realms.RealmObject"/>/<see cref="T:Realms.EmbeddedObject"/>.
            </exception>
            <returns>An <see cref="T:Realms.Schema.ObjectSchema"/> describing the specified Type.</returns>
            <param name="type">Type of a <see cref="T:Realms.RealmObject"/>/<see cref="T:Realms.EmbeddedObject"/> descendant for which you want a schema.</param>
        </member>
        <member name="T:Realms.Schema.Property">
            <summary>
            Describes a single property of a class stored in a <see cref="T:Realms.Realm"/>.
            </summary>
        </member>
        <member name="P:Realms.Schema.Property.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Realms.Schema.Property.Type">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Realms.Schema.Property.ObjectType">
            <summary>
            Gets or sets the type of the object.
            </summary>
            <value>The type of the object.</value>
        </member>
        <member name="P:Realms.Schema.Property.LinkOriginPropertyName">
            <summary>
            Gets or sets the name of the property that links to the model containing this
            <see cref="F:Realms.Schema.PropertyType.LinkingObjects"/> property.
            </summary>
            <value>The name of the linking property.</value>
        </member>
        <member name="P:Realms.Schema.Property.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Realms.Schema.Property"/> is primary key.
            </summary>
            <value>
            <c>true</c> if the property is primary key (the matching property in the class definition is
            marked with <see cref="T:Realms.PrimaryKeyAttribute"/>); <c>false</c> otherwise.</value>
        </member>
        <member name="P:Realms.Schema.Property.IsIndexed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Realms.Schema.Property"/> is indexed.
            </summary>
            <value>
            <c>true</c> if the property should be indexed (the matching property in the class definition is
            marked with <see cref="T:Realms.IndexedAttribute"/>); <c>false</c> otherwise.</value>
        </member>
        <member name="T:Realms.Schema.PropertyType">
            <summary>
            An enum, containing the possible property types.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Int">
            <summary>
            Integer property, combining all integral types.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Bool">
            <summary>
            Boolean property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.String">
            <summary>
            String property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Data">
            <summary>
            Binary data (byte[]) property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Date">
            <summary>
            DateTimeOffset property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Float">
            <summary>
            32 bit floating point property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Double">
            <summary>
            64 bit floating point property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Object">
            <summary>
            Related object property, representing a one-to-one or many-to-one relationship.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.LinkingObjects">
            <summary>
            A collection of objects linking to the model owning this property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.ObjectId">
            <summary>
            96 bit ObjectID property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Decimal">
            <summary>
            128 bit decimal property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Guid">
            <summary>
            128 bit UUID property.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Required">
            <summary>
            A required property. Can be combined with other values.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Nullable">
            <summary>
            A nullable (optional) property. Can be combined with other values.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Array">
            <summary>
            A collection. Can be combined with other values.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Set">
            <summary>
            A collection of unique values. Can be combined with other values.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.Flags">
            <summary>
            Metadata flags.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.NullableInt">
            <summary>
            A shorthand for PropertyType.Int | PropertyType.Nullable.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.NullableBool">
            <summary>
            A shorthand for PropertyType.Bool | PropertyType.Nullable.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.NullableString">
            <summary>
            A shorthand for PropertyType.String | PropertyType.Nullable.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.NullableData">
            <summary>
            A shorthand for PropertyType.Data | PropertyType.Nullable.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.NullableFloat">
            <summary>
            A shorthand for PropertyType.Float | PropertyType.Nullable.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.NullableDouble">
            <summary>
            A shorthand for PropertyType.Double | PropertyType.Nullable.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.NullableDate">
            <summary>
            A shorthand for PropertyType.Date | PropertyType.Nullable.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.NullableObjectId">
            <summary>
            A shorthand for PropertyType.ObjectId | PropertyType.Nullable.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.NullableDecimal">
            <summary>
            A shorthand for PropertyType.Decimal | PropertyType.Nullable.
            </summary>
        </member>
        <member name="F:Realms.Schema.PropertyType.NullableGuid">
            <summary>
            A shorthand for PropertyType.Guid | PropertyType.Nullable.
            </summary>
        </member>
        <member name="T:Realms.Schema.RealmSchema">
            <summary>
            Describes the complete set of classes which may be stored in a Realm, either from assembly declarations or,
            dynamically, by evaluating a Realm from disk.
            </summary>
            <remarks>
            By default this will be all the <see cref="T:Realms.RealmObject"/>s and <see cref="T:Realms.EmbeddedObject"/>s in all your assemblies
            unless you restrict with <see cref="P:Realms.RealmConfigurationBase.ObjectClasses"/>. Just because a given class <em>may</em>
            be stored in a Realm doesn't imply much overhead. There will be a small amount of metadata but objects only start to
            take up space once written.
            </remarks>
        </member>
        <member name="M:Realms.Schema.RealmSchema.AddDefaultTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds a collection of types to the default schema.
            </summary>
            <param name="types">Types to be added to the default schema.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the schema has already materialized.</exception>
        </member>
        <member name="P:Realms.Schema.RealmSchema.Count">
            <summary>
            Gets the number of known classes in the schema.
            </summary>
            <value>The number of known classes.</value>
        </member>
        <member name="M:Realms.Schema.RealmSchema.Find(System.String)">
            <summary>
            Finds the definition of a class in this schema.
            </summary>
            <param name="name">A valid class name which may be in this schema.</param>
            <exception cref="T:System.ArgumentException">Thrown if a name is not supplied.</exception>
            <returns>An <see cref="T:Realms.Schema.ObjectSchema"/> or <c>null</c> to indicate not found.</returns>
        </member>
        <member name="M:Realms.Schema.RealmSchema.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Realms.Schema.RealmSchema.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Realms.IThreadConfined">
            <summary>
            An interface representing a thread confined object.
            </summary>
        </member>
        <member name="P:Realms.IThreadConfined.IsManaged">
            <summary>
            Gets a value indicating whether the object is managed.
            </summary>
        </member>
        <member name="P:Realms.IThreadConfined.IsValid">
            <summary>
            Gets a value indicating whether the object is still valid (i.e. its Realm isn't closed and the object isn't deleted).
            </summary>
        </member>
        <member name="P:Realms.IThreadConfined.Metadata">
            <summary>
            Gets a value representing the object's metadata.
            </summary>
        </member>
        <member name="P:Realms.IThreadConfined.Handle">
            <summary>
            Gets a value representing the native handle for that object.
            </summary>
        </member>
        <member name="T:Realms.ThreadSafeReference">
            <summary>
            An object intended to be passed between threads containing a thread-safe reference to its
            thread-confined object.
            <para/>
            To resolve a thread-safe reference on a target <see cref="T:Realms.Realm"/> on a different thread, pass it to
            <c>Realm.ResolveReference</c>.
            </summary>
            <remarks>
            A <see cref="T:Realms.ThreadSafeReference"/> object must be resolved at most once.
            <para/>
            Failing to resolve a <see cref="T:Realms.ThreadSafeReference"/> will result in the source version of the
            Realm being pinned until the reference is deallocated.
            <para/>
            Prefer short-lived <see cref="T:Realms.ThreadSafeReference"/>s as the data for the version of the source Realm
            will be retained until all references have been resolved or deallocated.
            </remarks>
        </member>
        <member name="M:Realms.ThreadSafeReference.Create``1(System.Linq.IQueryable{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.ThreadSafeReference.Query`1"/> class.
            </summary>
            <param name="value">
            The thread-confined <see cref="T:System.Linq.IQueryable`1"/> to create a thread-safe reference to. It must be a collection,
            obtained by calling <see cref="M:Realms.Realm.All``1"/> or a subsequent LINQ query.
            </param>
            <typeparam name="T">The type of the <see cref="T:Realms.RealmObject"/> or <see cref="T:Realms.EmbeddedObject"/> contained in the query.</typeparam>
            <returns>A <see cref="T:Realms.ThreadSafeReference"/> that can be passed to <see cref="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.Query{``0})"/> on a different thread.</returns>
        </member>
        <member name="M:Realms.ThreadSafeReference.Create``1(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.ThreadSafeReference.Object`1"/> class.
            </summary>
            <param name="value">The thread-confined <see cref="T:Realms.RealmObject"/> or <see cref="T:Realms.EmbeddedObject"/> to create a thread-safe reference to.</param>
            <typeparam name="T">The type of the <see cref="T:Realms.RealmObject"/>/<see cref="T:Realms.EmbeddedObject"/>.</typeparam>
            <returns>A <see cref="T:Realms.ThreadSafeReference"/> that can be passed to <see cref="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.Object{``0})"/> on a different thread.</returns>
        </member>
        <member name="M:Realms.ThreadSafeReference.Create``1(System.Collections.Generic.IList{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.ThreadSafeReference.List`1"/> class.
            </summary>
            <param name="value">
            The thread-confined <see cref="T:System.Collections.Generic.IList`1"/> to create a thread-safe reference to. It must be a collection
            that is a managed property of a <see cref="T:Realms.RealmObject"/> or an <see cref="T:Realms.EmbeddedObject"/>.
            </param>
            <typeparam name="T">The type of the objects contained in the list.</typeparam>
            <returns>A <see cref="T:Realms.ThreadSafeReference"/> that can be passed to <see cref="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.List{``0})"/> on a different thread.</returns>
        </member>
        <member name="M:Realms.ThreadSafeReference.Create``1(System.Collections.Generic.ISet{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:Realms.ThreadSafeReference.Set`1"/> class.
            </summary>
            <param name="value">
            The thread-confined <see cref="T:System.Collections.Generic.ISet`1"/> to create a thread-safe reference to. It must be a collection
            that is a managed property of a <see cref="T:Realms.RealmObject"/> or an <see cref="T:Realms.EmbeddedObject"/>.
            </param>
            <typeparam name="T">The type of the objects contained in the set.</typeparam>
            <returns>A <see cref="T:Realms.ThreadSafeReference"/> that can be passed to <see cref="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.Set{``0})"/> on a different thread.</returns>
        </member>
        <member name="T:Realms.ThreadSafeReference.Query`1">
            <summary>
            A reference to a <see cref="T:System.Linq.IQueryable`1"/> intended to be passed between threads.
            <para/>
            To resolve a thread-safe reference on a target <see cref="T:Realms.Realm"/> on a different thread, pass it to
            <see cref="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.Query{``0})"/>.
            </summary>
            <remarks>
            A <see cref="T:Realms.ThreadSafeReference"/> object must be resolved at most once.
            <para/>
            Failing to resolve a <see cref="T:Realms.ThreadSafeReference"/> will result in the source version of the
            Realm being pinned until the reference is deallocated.
            <para/>
            Prefer short-lived <see cref="T:Realms.ThreadSafeReference"/>s as the data for the version of the source Realm
            will be retained until all references have been resolved or deallocated.
            </remarks>
            <typeparam name="T">The type of the <see cref="T:Realms.RealmObject"/>/<see cref="T:Realms.EmbeddedObject"/> contained in the query.</typeparam>
        </member>
        <member name="T:Realms.ThreadSafeReference.Object`1">
            <summary>
            A reference to a <see cref="T:Realms.RealmObject"/> or an <see cref="T:Realms.EmbeddedObject"/> intended to be passed between threads.
            <para/>
            To resolve a thread-safe reference on a target <see cref="T:Realms.Realm"/> on a different thread, pass it to
            <see cref="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.Object{``0})"/>.
            </summary>
            <remarks>
            A <see cref="T:Realms.ThreadSafeReference"/> object must be resolved at most once.
            <para/>
            Failing to resolve a <see cref="T:Realms.ThreadSafeReference"/> will result in the source version of the
            Realm being pinned until the reference is deallocated.
            <para/>
            Prefer short-lived <see cref="T:Realms.ThreadSafeReference"/>s as the data for the version of the source Realm
            will be retained until all references have been resolved or deallocated.
            </remarks>
            <typeparam name="T">The type of the <see cref="T:Realms.RealmObject"/>/<see cref="T:Realms.EmbeddedObject"/>.</typeparam>
        </member>
        <member name="T:Realms.ThreadSafeReference.List`1">
            <summary>
            A reference to a <see cref="T:System.Collections.Generic.IList`1"/> intended to be passed between threads.
            <para/>
            To resolve a thread-safe reference on a target <see cref="T:Realms.Realm"/> on a different thread, pass it to
            <see cref="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.List{``0})"/>.
            </summary>
            <remarks>
            A <see cref="T:Realms.ThreadSafeReference"/> object must be resolved at most once.
            <para/>
            Failing to resolve a <see cref="T:Realms.ThreadSafeReference"/> will result in the source version of the
            Realm being pinned until the reference is deallocated.
            <para/>
            Prefer short-lived <see cref="T:Realms.ThreadSafeReference"/>s as the data for the version of the source Realm
            will be retained until all references have been resolved or deallocated.
            </remarks>
            <typeparam name="T">The type of the objects contained in the list.</typeparam>
        </member>
        <member name="T:Realms.ThreadSafeReference.Set`1">
            <summary>
            A reference to a <see cref="T:System.Collections.Generic.ISet`1"/> intended to be passed between threads.
            <para/>
            To resolve a thread-safe reference on a target <see cref="T:Realms.Realm"/> on a different thread, pass it to
            <see cref="M:Realms.Realm.ResolveReference``1(Realms.ThreadSafeReference.Set{``0})"/>.
            </summary>
            <remarks>
            A <see cref="T:Realms.ThreadSafeReference"/> object must be resolved at most once.
            <para/>
            Failing to resolve a <see cref="T:Realms.ThreadSafeReference"/> will result in the source version of the
            Realm being pinned until the reference is deallocated.
            <para/>
            Prefer short-lived <see cref="T:Realms.ThreadSafeReference"/>s as the data for the version of the source Realm
            will be retained until all references have been resolved or deallocated.
            </remarks>
            <typeparam name="T">The type of the objects contained in the set.</typeparam>
        </member>
        <member name="T:Realms.Transaction">
            <summary>
            Provides a scope to safely read and write to a <see cref="T:Realms.Realm"/>. Must use explicitly via <see cref="M:Realms.Realm.BeginWrite"/>.
            </summary>
            <remarks>
            All access to a <see cref="T:Realms.Realm"/> occurs within a <see cref="T:Realms.Transaction"/>. Read transactions are created implicitly.
            </remarks>
        </member>
        <member name="M:Realms.Transaction.Dispose">
            <summary>
            Will automatically <see cref="M:Realms.Transaction.Rollback"/> the transaction on existing scope, if not explicitly Committed.
            </summary>
        </member>
        <member name="M:Realms.Transaction.Rollback">
            <summary>
            Use explicitly to undo the changes in a <see cref="T:Realms.Transaction"/>, otherwise it is automatically invoked by
            exiting the block.
            </summary>
        </member>
        <member name="M:Realms.Transaction.Commit">
            <summary>
            Use to save the changes to the realm. If <see cref="T:Realms.Transaction"/> is declared in a <c>using</c> block,
            must be used before the end of that block.
            </summary>
        </member>
        <member name="T:Realms.Weaving.IRealmObjectHelper">
            <summary>
            A helper class for internal use. Helper classes are generated automatically and provide strongly typed class-specific convenience methods.
            </summary>
        </member>
        <member name="M:Realms.Weaving.IRealmObjectHelper.CreateInstance">
            <summary>
            Creates an instance of a RealmObjectBase.
            </summary>
            <returns>The RealmObjectBase.</returns>
        </member>
        <member name="M:Realms.Weaving.IRealmObjectHelper.CopyToRealm(Realms.RealmObjectBase,System.Boolean,System.Boolean)">
            <summary>
            A strongly typed, optimized method to add a RealmObjectBase to the realm.
            </summary>
            <param name="instance">The RealmObjectBase to add.</param>
            <param name="update">If set to <c>true</c>, update the existing value (if any). Otherwise, try to add and throw if an object with the same primary key already exists.</param>
            <param name="skipDefaults">
            If set to <c>true</c> will not invoke the setters of properties that have default values.
            Generally, should be <c>true</c> for newly created objects and <c>false</c> when updating existing ones.
            </param>
        </member>
        <member name="M:Realms.Weaving.IRealmObjectHelper.TryGetPrimaryKeyValue(Realms.RealmObject,System.Object@)">
            <summary>
            Tries the get primary key value from a RealmObjectBase.
            </summary>
            <returns><c>true</c>, if the class has primary key, <c>false</c> otherwise.</returns>
            <param name="instance">The RealmObjectBase instance.</param>
            <param name="value">The value of the primary key.</param>
        </member>
    </members>
</doc>
